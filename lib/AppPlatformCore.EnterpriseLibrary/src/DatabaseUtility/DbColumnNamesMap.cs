using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AppPlatform.Core.EnterpriseLibrary.DatabaseUtility
{
    public class DbColumnNamesMap
    {

        private static Dictionary<string, string> columnNamesMap;

        /// <summary>
        /// <par
        /// </summary>
        static DbColumnNamesMap() 
        {
            columnNamesMap = new Dictionary<string, string>();
            // custom added mapping
            

            // generated from list
            columnNamesMap.Add("AbandonmentDrinking", "AbandDrinking");
            columnNamesMap.Add("AbandonmentDrinkingDate", "AbandDrinkingDate");
            columnNamesMap.Add("AbandonmentDrinkingResultID", "AbandDrinkingResultID");
            columnNamesMap.Add("AbandonmentDrinkingResultTranID", "AbandDrinkingResultTID");
            columnNamesMap.Add("AbsenceCause", "AbsenceCause");
            columnNamesMap.Add("AbsenceDocumentRelationID", "AbsenceDocuRelID");
            columnNamesMap.Add("AbsenceFrom", "AbsenceFrom");
            columnNamesMap.Add("AbsenceID", "AbseID");
            columnNamesMap.Add("AbsenceIntervalID", "AbseIntID");
            columnNamesMap.Add("AbsenceIntervalTranID", "AbseIntTID");
            columnNamesMap.Add("AbsenceIZDocumentRelationID", "AbseIZDocuRelID");
            columnNamesMap.Add("AbsenceReason", "AbsenceReason");
            columnNamesMap.Add("AbsenceReasonCode", "AbsenceReasonCode");
            columnNamesMap.Add("AbsenceReasonDescription", "AbsenceReasonDescr");
            columnNamesMap.Add("AbsenceStatusID", "AbseStatID");
            columnNamesMap.Add("AbsenceTo", "AbsenceTo");
            columnNamesMap.Add("AbsenceTranID", "AbsenceTID");
            columnNamesMap.Add("AbsenceTypeID", "AbsenceTypID");
            columnNamesMap.Add("AbsentHours", "AbsentHours");
            columnNamesMap.Add("Active", "Active");
            columnNamesMap.Add("ActiveMTPOrderID", "ActiveMTPOrderID");
            columnNamesMap.Add("ActiveSubstanceCode", "ActiveSubstanceCode");
            columnNamesMap.Add("ActiveSubstanceDescription", "ActiveSubstanceDescr");
            columnNamesMap.Add("ActiveWorkplaceIVZCode", "ActiveWorkplIVZCode");
            columnNamesMap.Add("ActivityClassificationCode", "ActivityClassCode");
            columnNamesMap.Add("ActivityClassificationID", "ActivityClassID");
            columnNamesMap.Add("ActivityClassificationTranID", "ActivityClassTID");
            columnNamesMap.Add("ActivityName", "ActivityName");
            columnNamesMap.Add("AddictionID", "AddictionID");
            columnNamesMap.Add("AdditionalClassificationCode", "AdditionalClassCode");
            columnNamesMap.Add("AdditionalCode", "AdditionalCode");
            columnNamesMap.Add("AdditionalInformation", "AdditionalInformation");
            columnNamesMap.Add("AdditionalInstructions", "AdditionalInstructions");
            columnNamesMap.Add("AdditionalName", "AdditionalName");
            columnNamesMap.Add("AdditionalPaymentID", "AdditionalPayID");
            columnNamesMap.Add("AdditionalPaymentTranID", "AdditionalPayTID");
            columnNamesMap.Add("Address", "Address");
            columnNamesMap.Add("AddressAdditionalcode", "AddressAdditionalcode");
            columnNamesMap.Add("Adress", "Adress");
            columnNamesMap.Add("Alcohol", "Alcohol");
            columnNamesMap.Add("AlcoholYes", "AlcoholYes");
            columnNamesMap.Add("AllergenGroup", "AllergenGroup");
            columnNamesMap.Add("AllergyID", "AllergyID");
            columnNamesMap.Add("AllergyType", "AllergyTyp");
            columnNamesMap.Add("Alpha2", "Alpha2");
            columnNamesMap.Add("Alpha3", "Alpha3");
            columnNamesMap.Add("AlternativeMedication", "AlternativeMed");
            columnNamesMap.Add("AmbulanceNmp", "AmbulanceNmp");
            columnNamesMap.Add("AmbulanceVehicleID", "AmbulanceVehicID");
            columnNamesMap.Add("AmbulanceVehicleName", "AmbulanceVehicName");
            columnNamesMap.Add("AmbulanceVehicleNumber", "AmbulanceVehicNumber");
            columnNamesMap.Add("AmbulanceVehicleType", "AmbulanceVehicTyp");
            columnNamesMap.Add("Ammount", "Ammount");
            columnNamesMap.Add("AnthropologyAnamnezaID", "AnthropAnamnezaID");
            columnNamesMap.Add("AppearanceNumber", "AppearanceNumber");
            columnNamesMap.Add("ApprovedPrice", "ApprovedPrice");
            columnNamesMap.Add("ArrivalDate", "ArrivDate");
            columnNamesMap.Add("ArrivalMethodID", "ArrivMethID");
            columnNamesMap.Add("ArrivalTime", "ArrivTime");
            columnNamesMap.Add("ArterialHypertension", "ArterialHypertension");
            columnNamesMap.Add("AssemblyPath", "AssemblyPath");
            columnNamesMap.Add("AttributeGroupID", "AttrGroupID");
            columnNamesMap.Add("AttributeGroupType", "AttrGroupTyp");
            columnNamesMap.Add("AttributeGUITypeID", "AttrGUITypID");
            columnNamesMap.Add("AttributeID", "AttrID");
            columnNamesMap.Add("AttributeToAttributeGroupRelationID", "AttrToAttrGroupRelID");
            columnNamesMap.Add("AttributeTranID", "AttrTID");
            columnNamesMap.Add("AttributeTypeID", "AttrTypID");
            columnNamesMap.Add("BadHabbits", "BadHabbits");
            columnNamesMap.Add("BaseClass", "BaseClass");
            columnNamesMap.Add("BaseNumber", "BaseNumber");
            columnNamesMap.Add("BeforeHospitalizationRevivalSummaryID", "BefHospitReviSummID");
            columnNamesMap.Add("BirthDate", "BirthDate");
            columnNamesMap.Add("BirthYear", "BirthYear");
            columnNamesMap.Add("Bit1", "Bit1");
            columnNamesMap.Add("Bit2", "Bit2");
            columnNamesMap.Add("BloodGroup", "BloodGroup");
            columnNamesMap.Add("BloodPressureHight", "BloodPressureHight");
            columnNamesMap.Add("BloodPressureLow", "BloodPressureLow");
            columnNamesMap.Add("BloodSugar", "BloodSugar");
            columnNamesMap.Add("BodyHeight", "BodyHeight");
            columnNamesMap.Add("BodyWeight", "BodyWeight");
            columnNamesMap.Add("Bolezen", "Bolezen");
            columnNamesMap.Add("Bool1", "Bool1");
            columnNamesMap.Add("Bool2", "Bool2");
            columnNamesMap.Add("BPIDescription", "BPIDescr");
            columnNamesMap.Add("BPIID", "BPIID");
            columnNamesMap.Add("BPITranID", "BPITID");
            columnNamesMap.Add("BreastExaminationInLastTwoYears", "BreastExamiInLastTwoYrs");
            columnNamesMap.Add("BusinessPartnerCategoryID", "BPartnerCategID");
            columnNamesMap.Add("BusinessPartnerID", "BPartnerID");
            columnNamesMap.Add("BusinessPartnerNumber", "BPartnerNumber");
            columnNamesMap.Add("BusinessPartnerOrganizationalUnitID", "BPartnerOrganizUnitID");
            columnNamesMap.Add("BusinessPartnerTipObracunskegaDokumentaRelationID", "BPartnerTipObracDokuaRelID");
            columnNamesMap.Add("BusinessPartnerTranID", "BPartnerTID");
            columnNamesMap.Add("BusinessPartnerTypeID", "BPartnerTypID");
            columnNamesMap.Add("BusinessPartnerTypeTranID", "BPartnerTypTID");
            columnNamesMap.Add("BusinessPhone", "BusinessPhone");
            columnNamesMap.Add("BussinesPartner", "BussinesPartner");
            columnNamesMap.Add("CalculatedField", "CalculatedField");
            columnNamesMap.Add("CallDate", "CallDate");
            columnNamesMap.Add("CallInterventionDate", "CallIntrDate");
            columnNamesMap.Add("CallInterventionTime", "CallIntrTime");
            columnNamesMap.Add("CarAccident", "CarAccident");
            columnNamesMap.Add("CardIndexNumber", "CardIndNumber");
            columnNamesMap.Add("CarParkID", "CarParkID");
            columnNamesMap.Add("CaseNumber", "CaseNumber");
            columnNamesMap.Add("CasovniNormativ", "CasovniNorm");
            columnNamesMap.Add("CategoriesID", "CategsID");
            columnNamesMap.Add("CategoriesOfDisabilityID", "CategsOfDisabilID");
            columnNamesMap.Add("CategoriesOfDisabilityTranID", "CategsOfDisabilTID");
            columnNamesMap.Add("Category", "Categ");
            columnNamesMap.Add("CategoryCode", "CategCode");
            columnNamesMap.Add("CategoryofDisabilityLongID", "CategofDisabilLngID");
            columnNamesMap.Add("CenaEnoteMere", "CenaEnoteMere");
            columnNamesMap.Add("CenovnePostavkeID", "CenovnePostavkeID");
            columnNamesMap.Add("CerebrovascularDisease", "CerebrovascularDisea");
            columnNamesMap.Add("Certificate", "Certificate");
            columnNamesMap.Add("CertificateBaseID", "CertificateBaseID");
            columnNamesMap.Add("ChangeReason", "ChangeReason");
            columnNamesMap.Add("ChapterCode", "ChaptCode");
            columnNamesMap.Add("ChapterOfOperationalInterventionID", "ChaptOfOperaalIntrID");
            columnNamesMap.Add("ChapterOfSurgicalInterventionID", "ChaptOfSurgIntrID");
            columnNamesMap.Add("ChapterOfSurgicalInterventionTranID", "ChaptOfSurgIntrTID");
            columnNamesMap.Add("CheckDigit", "CheckDigit");
            columnNamesMap.Add("ChildbirthPregnancy", "ChildbirthPregnancy");
            columnNamesMap.Add("ChronicPatientsID", "ChronicPatisID");
            columnNamesMap.Add("ClasificationName", "ClasificationName");
            columnNamesMap.Add("ClassificationName", "ClassName");
            columnNamesMap.Add("ClassificationType", "ClassTyp");
            columnNamesMap.Add("ClosedService", "ClosedSvc");
            columnNamesMap.Add("Code", "Code");
            columnNamesMap.Add("CodeDuality", "CodeDuality");
            columnNamesMap.Add("Comment", "Comment");
            columnNamesMap.Add("Comments", "Comments");
            columnNamesMap.Add("CommissionDecisionID", "CommisDecisID");
            columnNamesMap.Add("CommissionDecisionRelationID", "CommisDecisRelID");
            columnNamesMap.Add("CommissionDecisionTranID", "CommisDecisTID");
            columnNamesMap.Add("Company", "Company");
            columnNamesMap.Add("CompanyCode", "CompanyCode");
            columnNamesMap.Add("Completed", "Completed");
            columnNamesMap.Add("ConfigurationID", "ConfID");
            columnNamesMap.Add("ConfigurationName", "ConfName");
            columnNamesMap.Add("ContactEmailAddress", "ContactEmailAddress");
            columnNamesMap.Add("ContactPersonName", "ContactPersName");
            columnNamesMap.Add("ContactPersonPhoneNumber", "ContactPersPhoneNumber");
            columnNamesMap.Add("ContinuousInsuranceInDays", "ContinuousInsurInDays");
            columnNamesMap.Add("ContractExpirationDate", "ContractExpirationDate");
            columnNamesMap.Add("ContractNumber", "ContractNumber");
            columnNamesMap.Add("ControlWhat", "ControlWhat");
            columnNamesMap.Add("ControlWhen", "ControlWhen");
            columnNamesMap.Add("ControlWho", "ControlWho");
            columnNamesMap.Add("ConventionCountryID", "ConventionCountryID");
            columnNamesMap.Add("ConventionCountryTranID", "ConventionCountryTID");
            columnNamesMap.Add("ConversionCoefficent", "ConversionCoefficent");
            columnNamesMap.Add("COPD_Asthma", "COPD_Asthma");
            columnNamesMap.Add("Copy", "Copy");
            columnNamesMap.Add("Counter", "Counter");
            columnNamesMap.Add("CounterID", "CounterID");
            columnNamesMap.Add("CounterType", "CounterTyp");
            columnNamesMap.Add("Country", "Country");
            columnNamesMap.Add("CountryCode", "CountryCode");
            columnNamesMap.Add("CountryID", "CountryID");
            columnNamesMap.Add("CountryName", "CountryName");
            columnNamesMap.Add("CountryOfConventionCode", "CountryOfConventionCode");
            columnNamesMap.Add("CountryOfConventionID", "CountryOfConventionID");
            columnNamesMap.Add("CountryOfConventionTranID", "CountryOfConventionTID");
            columnNamesMap.Add("CountryTranID", "CountryTID");
            columnNamesMap.Add("CoverageTypeID", "CoverageTypID");
            columnNamesMap.Add("CoverageTypeTranID", "CoverageTypTID");
            columnNamesMap.Add("CreatedByDoctorIvzNumber", "CreatedByDoctIvzNumber");
            columnNamesMap.Add("CreatedByProffessionaIVZCode", "CreatedByProffessionaIVZCode");
            columnNamesMap.Add("CreatedOn", "CreatedOn");
            columnNamesMap.Add("CreatorHealthCareWorkplaceID", "CreatorHCareWorkplID");
            columnNamesMap.Add("CreatorHealthCareWorkplaceTranID", "CreatorHCareWorkplTID");
            columnNamesMap.Add("CurrentProgress", "CurrProgress");
            columnNamesMap.Add("CurrentProgressAll", "CurrProgressAll");
            columnNamesMap.Add("CurrentProgressCount", "CurrProgressCount");
            columnNamesMap.Add("CurrentVisitSessionID", "CurrVisitSessID");
            columnNamesMap.Add("CurrentVulnerability", "CurrVulnerability");
            columnNamesMap.Add("Data", "Data");
            columnNamesMap.Add("DataInfo", "DataInfo");
            columnNamesMap.Add("DateFrom", "DateFrom");
            columnNamesMap.Add("DateOfControl", "DateOfControl");
            columnNamesMap.Add("DateOfDecision", "DateOfDecis");
            columnNamesMap.Add("DateOfDeparture", "DateOfDeparture");
            columnNamesMap.Add("DateOfDisease", "DateOfDisea");
            columnNamesMap.Add("DateOfExtendion", "DateOfExtendion");
            columnNamesMap.Add("DateOfGivenDecision", "DateOfGivenDecis");
            columnNamesMap.Add("DateOfInsert", "DateOfInsert");
            columnNamesMap.Add("DateOfMedicalEducation", "DateOfMedEducat");
            columnNamesMap.Add("DateOfPhysicalImpairment", "DateOfPhysicalImpairment");
            columnNamesMap.Add("DateOfReVisiting", "DateOfReVisiting");
            columnNamesMap.Add("DateOfVisitation", "DateOfVisitation");
            columnNamesMap.Add("DateTime1", "DateTime1");
            columnNamesMap.Add("DateTime2", "DateTime2");
            columnNamesMap.Add("DateTo", "DateTo");
            columnNamesMap.Add("DatumIzbiraStoritev", "DatumIzbiraStori");
            columnNamesMap.Add("DatumIzdaje", "DatumIzdaje");
            columnNamesMap.Add("DatumIzdelave", "DatumIzdelave");
            columnNamesMap.Add("DatumObiska", "DatumObiska");
            columnNamesMap.Add("DatumRojstva", "DatumRojstva");
            columnNamesMap.Add("DatumZadnjeSpremembe", "DatumZadnjeSpremembe");
            columnNamesMap.Add("DaysForTaking", "DaysForTaking");
            columnNamesMap.Add("Death", "Death");
            columnNamesMap.Add("DeathDate", "DeathDate");
            columnNamesMap.Add("DeciduousTeethCount", "DeciduousTeethCount");
            columnNamesMap.Add("Decimal1", "Decimal1");
            columnNamesMap.Add("Decimal2", "Decimal2");
            columnNamesMap.Add("DecisionDate", "DecisDate");
            columnNamesMap.Add("DecisionDoctorNumber", "DecisDoctNumber");
            columnNamesMap.Add("DecisionID", "DecisID");
            columnNamesMap.Add("DecisionMadeBy", "DecisMadeBy");
            columnNamesMap.Add("DecisionNumber", "DecisNumber");
            columnNamesMap.Add("DecisionPurposeIZID", "DecisPurpIZID");
            columnNamesMap.Add("DecisionTranID", "DecisTID");
            columnNamesMap.Add("DecisionType", "DecisTyp");
            columnNamesMap.Add("DecisionValidFrom", "DecisValidFrom");
            columnNamesMap.Add("DefaultValue", "DefaultValue");
            columnNamesMap.Add("Defibrilation", "Defibrilation");
            columnNamesMap.Add("Dejavnost", "Dej");
            columnNamesMap.Add("DejavnostPreventive", "DejPrevent");
            columnNamesMap.Add("Deleted", "Deleted");
            columnNamesMap.Add("DeletedByDoctorIvzNumber", "DeletedByDoctIvzNumber");
            columnNamesMap.Add("DelezOZZ", "DelezOZZ");
            columnNamesMap.Add("DeliverDate", "DeliverDate");
            columnNamesMap.Add("DeliverTime", "DeliverTime");
            columnNamesMap.Add("Delovisce", "Delovisce");
            columnNamesMap.Add("DelovisceRealizacijeDelavca", "DelovisceRealizacijeDelavca");
            columnNamesMap.Add("DemographicDataSourceID", "DemographicDataSourceID");
            columnNamesMap.Add("DemographicDataSourceTranID", "DemographicDataSourceTID");
            columnNamesMap.Add("DentalState", "DentalState");
            columnNamesMap.Add("DentistEncounterTranID", "DentiEncounTID");
            columnNamesMap.Add("DentistLaboratoriesID", "DentiLabsID");
            columnNamesMap.Add("DentistMaterialID", "DentiMaterialID");
            columnNamesMap.Add("DentistMaterialTranID", "DentiMaterialTID");
            columnNamesMap.Add("DentistMetalID", "DentiMetalID");
            columnNamesMap.Add("DentistMetalTranID", "DentiMetalTID");
            columnNamesMap.Add("DentistProformaInvoiceID", "DentiProformaInvoiID");
            columnNamesMap.Add("DentistProstheticsProposalID", "DentiProsthPropsID");
            columnNamesMap.Add("DentistProstheticsWorkOrderID", "DentiProsthWorkOrdID");
            columnNamesMap.Add("DentistServiceID", "DentiSvcID");
            columnNamesMap.Add("DentistServiceSetID", "DentiSvcSetID");
            columnNamesMap.Add("DentistServiceSetTranID", "DentiSvcSetTID");
            columnNamesMap.Add("DentistServiceTranID", "DentiSvcTID");
            columnNamesMap.Add("DentistSystematicReviewID", "DentiSystaticReviewID");
            columnNamesMap.Add("DentistToothID", "DentiToothID");
            columnNamesMap.Add("DentistVisitID", "DentiVisitID");
            columnNamesMap.Add("DentistXrayVisitID", "DentiXrayVisitID");
            columnNamesMap.Add("Description", "Descr");
            columnNamesMap.Add("DescriptionEng", "DescrEng");
            columnNamesMap.Add("DestinationIVZServiceID", "DestinationIVZSvcID");
            columnNamesMap.Add("DestinationIVZServiceTranID", "DestinationIVZSvcTID");
            columnNamesMap.Add("Diabetes", "Diabetes");
            columnNamesMap.Add("DiagnoseCode", "DiagCode");
            columnNamesMap.Add("DiagnoseDescription", "DiagDescr");
            columnNamesMap.Add("DiagnoseID", "DiagID");
            columnNamesMap.Add("DiagnoseType", "DiagTyp");
            columnNamesMap.Add("DiagnosisForFTHID", "DiagsForFTHID");
            columnNamesMap.Add("DiagnozaCode", "DiagnozaCode");
            columnNamesMap.Add("DiagnozaObiskaID", "DiagnozaObiskaID");
            columnNamesMap.Add("DiagnozaObiskaTranID", "DiagnozaObiskaTID");
            columnNamesMap.Add("DiagnozaStoritveID", "DiagnozaStoritveID");
            columnNamesMap.Add("DiagnozaStoritveTranID", "DiagnozaStoritveTID");
            columnNamesMap.Add("DisabilityCategory", "DisabilCateg");
            columnNamesMap.Add("DisabilityHelpers", "DisabilHlps");
            columnNamesMap.Add("DisabilityHelpersDate", "DisabilHlpsDate");
            columnNamesMap.Add("DischargedAlive", "DischargedAlive");
            columnNamesMap.Add("Disease", "Disea");
            columnNamesMap.Add("DisplayName", "DisplayName");
            columnNamesMap.Add("Doctor", "Doct");
            columnNamesMap.Add("DoctorCode", "DoctCode");
            columnNamesMap.Add("DoctorDecisionDate", "DoctDecisDate");
            columnNamesMap.Add("DoctorDecisionID", "DoctDecisID");
            columnNamesMap.Add("DoctorDecisionNumber", "DoctDecisNumber");
            columnNamesMap.Add("DoctorFirstName", "DoctFstName");
            columnNamesMap.Add("DoctorID", "DoctID");
            columnNamesMap.Add("DoctorIvzNumber", "DoctIvzNumber");
            columnNamesMap.Add("DoctorLastName", "DoctLastName");
            columnNamesMap.Add("DoctorTranID", "DoctTID");
            columnNamesMap.Add("DoctorType", "DoctTyp");
            columnNamesMap.Add("DoctorTypeID", "DoctTypID");
            columnNamesMap.Add("DoctorTypeTranID", "DoctTypTID");
            columnNamesMap.Add("DocumentCreateError", "DocuCreateError");
            columnNamesMap.Add("DocumentGroup", "DocuGroup");
            columnNamesMap.Add("DocumentGUID", "DocuGUID");
            columnNamesMap.Add("DocumentID", "DocuID");
            columnNamesMap.Add("DocumentIdentifier", "DocuIdentifier");
            columnNamesMap.Add("DocumentName", "DocuName");
            columnNamesMap.Add("DocumentTranID", "DocuTID");
            columnNamesMap.Add("DocumentType", "DocuTyp");
            columnNamesMap.Add("DocumentTypeHealthCareIVZServiceRelationID", "DocuTypHCareIVZSvcRelID");
            columnNamesMap.Add("DokumentNaredil", "DokuNaredil");
            columnNamesMap.Add("DokumentVRTFObliki", "DokuVRTFObliki");
            columnNamesMap.Add("DokumentVXMLObliki", "DokuVXMLObliki");
            columnNamesMap.Add("DolgOpis", "DolgOpis");
            columnNamesMap.Add("Domain", "Domain");
            columnNamesMap.Add("Donor", "Donor");
            columnNamesMap.Add("DonorInfoModified", "DonorInfoModified");
            columnNamesMap.Add("Dose", "Dose");
            columnNamesMap.Add("DrzavaID", "DrzavaID");
            columnNamesMap.Add("DrzavaSklenjeneKonvencijeID", "DrzavaSklenKonvencID");
            columnNamesMap.Add("DrzavaTranID", "DrzavaTID");
            columnNamesMap.Add("DysgnatiaID", "DysgnatiaID");
            columnNamesMap.Add("DysgnatiaTranID", "DysgnatiaTID");
            columnNamesMap.Add("ECG", "ECG");
            columnNamesMap.Add("ECGChanges", "ECGChanges");
            columnNamesMap.Add("EditableAmmount", "EditableAmmount");
            columnNamesMap.Add("EditingPhaseID", "EditPhaseID");
            columnNamesMap.Add("Elements", "Elements");
            columnNamesMap.Add("Email", "Email");
            columnNamesMap.Add("EmergencyEncounterFinalStatusID", "EmergEncounFinalStatID");
            columnNamesMap.Add("EncounterContentDescription", "EncounContentDescr");
            columnNamesMap.Add("EncounterContentID", "EncounContentID");
            columnNamesMap.Add("EncounterContentSubTypeCode", "EncounContentSubTypCode");
            columnNamesMap.Add("EncounterContentTranID", "EncounContentTID");
            columnNamesMap.Add("EncounterContentTypeCode", "EncounContentTypCode");
            columnNamesMap.Add("EncounterID", "EncounID");
            columnNamesMap.Add("EncounterReasonID", "EncounReasonID");
            columnNamesMap.Add("EncounterReasonTranID", "EncounReasonTID");
            columnNamesMap.Add("EncounterSuccessionTypeID", "EncounSuccessionTypID");
            columnNamesMap.Add("EncounterSuccessionTypeTranID", "EncounSuccessionTypTID");
            columnNamesMap.Add("EncounterTranID", "EncounTID");
            columnNamesMap.Add("EndDate", "EndDate");
            columnNamesMap.Add("EnotaMereID", "EnotaMereID");
            columnNamesMap.Add("EnotaMereKolID", "EnotaMereKolID");
            columnNamesMap.Add("EnotaMereKolTranID", "EnotaMereKolTID");
            columnNamesMap.Add("EnotaMereTDID", "EnotaMereTDID");
            columnNamesMap.Add("EnotaMereTDTranID", "EnotaMereTDTID");
            columnNamesMap.Add("EnotaMereTranID", "EnotaMereTID");
            columnNamesMap.Add("EnteredInWorkPlaceID", "EnteredInWorkPlaceID");
            columnNamesMap.Add("EnteredInWorkPlaceTranID", "EnteredInWorkPlaceTID");
            columnNamesMap.Add("EntityID", "EntityID");
            columnNamesMap.Add("EntityTranID", "EntityTID");
            columnNamesMap.Add("EpisodeID", "EpisodeID");
            columnNamesMap.Add("EpisodeTranID", "EpisodeTID");
            columnNamesMap.Add("EpisodeType", "EpisodeTyp");
            columnNamesMap.Add("EpisodeTypeDescription", "EpisodeTypDescr");
            columnNamesMap.Add("Error", "Error");
            columnNamesMap.Add("Event", "Event");
            columnNamesMap.Add("EventType", "EventTyp");
            columnNamesMap.Add("ExcessBodyWeight", "ExcessBodyWeight");
            columnNamesMap.Add("ExecutionStartTime", "ExecutionStartTime");
            columnNamesMap.Add("ExecutionTime", "ExecutionTime");
            columnNamesMap.Add("ExpirationDate", "ExpirationDate");
            columnNamesMap.Add("ExtentTheAbdomen", "ExtentTheAbdomen");
            columnNamesMap.Add("ExternalAttributeCode", "ExtAttrCode");
            columnNamesMap.Add("ExternalAttributeToInternalAttributeRelationID", "ExtAttrToIntAttrRelID");
            columnNamesMap.Add("ExternalBoolData", "ExtBoolData");
            columnNamesMap.Add("ExternalComment", "ExtComment");
            columnNamesMap.Add("ExternalDataType", "ExtDataTyp");
            columnNamesMap.Add("ExternalDoctorsID", "ExtDoctsID");
            columnNamesMap.Add("ExternalInterpret", "ExtInterpret");
            columnNamesMap.Add("ExternalIsLower", "ExtIsLower");
            columnNamesMap.Add("ExternalIsUpper", "ExtIsUpper");
            columnNamesMap.Add("ExternalLowerUnit", "ExtLowerUnit");
            columnNamesMap.Add("ExternalLowerVal", "ExtLowerVal");
            columnNamesMap.Add("ExternalMeasurementUnit", "ExtMeasuUn");
            columnNamesMap.Add("ExternalMeasurementUnitToInternalMeasurementUnitRelationID", "ExtMeasuUnToIntMeasuUnRelID");
            columnNamesMap.Add("ExternalNData", "ExtNData");
            columnNamesMap.Add("ExternalNUnit", "ExtNUnit");
            columnNamesMap.Add("ExternalOrderId", "ExtOrderId");
            columnNamesMap.Add("ExternalPatientMapId", "ExtPatiMapId");
            columnNamesMap.Add("ExternalStatus", "ExtStat");
            columnNamesMap.Add("ExternalStrData", "ExtStrData");
            columnNamesMap.Add("ExternalSystemAddress", "ExtSystAddress");
            columnNamesMap.Add("ExternalSystemCode", "ExtSystCode");
            columnNamesMap.Add("ExternalSystemID", "ExtSystID");
            columnNamesMap.Add("ExternalSystemOrderID", "ExtSystOrderID");
            columnNamesMap.Add("ExternalSystemType", "ExtSystTyp");
            columnNamesMap.Add("ExternalTestId", "ExtTestId");
            columnNamesMap.Add("ExternalUpperUnit", "ExtUpperUnit");
            columnNamesMap.Add("ExternalUpperVal", "ExtUpperVal");
            columnNamesMap.Add("Eyewitnesses", "Eyewitnesses");
            columnNamesMap.Add("Family", "Family");
            columnNamesMap.Add("FamilyVisitAsSocialStatusID", "FamVisitAsSocialStatID");
            columnNamesMap.Add("FamilyVisitAsTypeOfVisitID", "FamVisitAsTypOfVisitID");
            columnNamesMap.Add("FathersName", "FathersName");
            columnNamesMap.Add("Field", "Field");
            columnNamesMap.Add("FiksnaCena", "FiksnaCena");
            columnNamesMap.Add("FileName", "FileName");
            columnNamesMap.Add("FinalDentalState", "FinalDentalState");
            columnNamesMap.Add("FinalityDate", "FinalityDate");
            columnNamesMap.Add("FirstName", "FstName");
            columnNamesMap.Add("FirstPatientVisitsDistributedThroughoutMK10ID", "FstPatiVisitDistThMK10ID");
            columnNamesMap.Add("FirstWorkshopDate", "FstWshopDate");
            columnNamesMap.Add("Fixed", "Fixed");
            columnNamesMap.Add("Format", "Format");
            columnNamesMap.Add("FormOfProtectionID", "FormOfProteID");
            columnNamesMap.Add("FormOfProtectionPatronageID", "FormOfProtePatronageID");
            columnNamesMap.Add("FTHID", "FTHID");
            columnNamesMap.Add("FullyInsuredPersonTypeID", "FullyInsuredPersTypID");
            columnNamesMap.Add("FullyInsuredPersonTypeTranID", "FullyInsuredPersTypTID");
            columnNamesMap.Add("FundOrganizationalUnit", "FundOrganizUnit");
            columnNamesMap.Add("Gender", "Gender");
            columnNamesMap.Add("GeneralAnamnezaID", "GeneAnamnezaID");
            columnNamesMap.Add("GeneralAnamnezaTranID", "GeneAnamnezaTID");
            columnNamesMap.Add("GeneralClassification", "GeneClass");
            columnNamesMap.Add("GeneralHealthStatusAssesmentID", "GeneHealthStatAssesmID");
            columnNamesMap.Add("GeneticDisposalHVD", "GeneticDisposalHVD");
            columnNamesMap.Add("GroupCode", "GroupCode");
            columnNamesMap.Add("Guid", "Guid");
            columnNamesMap.Add("GynecologicalExaminationInLastThreeYears", "GynecologExamiInLastThreeYrs");
            columnNamesMap.Add("HasOverpaidInsurance", "HasOverpaidInsur");
            columnNamesMap.Add("HaveHeartDesease", "HaveHeartDesease");
            columnNamesMap.Add("HDLCholesterol", "HDLCholesterol");
            columnNamesMap.Add("HealthCareActivity", "HCareActivity");
            columnNamesMap.Add("HealthcareCareProfessionalID", "HealthcareCareProfesID");
            columnNamesMap.Add("HealthcareCareProfessionalTranID", "HealthcareCareProfesTID");
            columnNamesMap.Add("HealthCareFacilityID", "HCareFacilID");
            columnNamesMap.Add("HealthCareFacilityProviderRelationID", "HCareFacilProvRelID");
            columnNamesMap.Add("HealthCareFacilityTranID", "HCareFacilTID");
            columnNamesMap.Add("HealthCareFacilityTypeID", "HCareFacilTypID");
            columnNamesMap.Add("HealthCareFacilityTypeTranID", "HCareFacilTypTID");
            columnNamesMap.Add("HealthCareIvzServiceCode", "HCareIvzSvcCode");
            columnNamesMap.Add("HealthCareIVZServiceID", "HCareIVZSvcID");
            columnNamesMap.Add("HealthCareIvzServiceOperationRelationID", "HCareIvzSvcOperaRelID");
            columnNamesMap.Add("HealthCareIVZServiceTranID", "HCareIVZSvcTID");
            columnNamesMap.Add("HealthCareProfessionalID", "HCareProfesID");
            columnNamesMap.Add("HealthCareProfessionalIVZNumber", "HCareProfesIVZNumber");
            columnNamesMap.Add("HealthCareProfessionalIvzServiceRelationID", "HCareProfesIvzSvcRelID");
            columnNamesMap.Add("HealthCareProfessionalPatientRelationID", "HCareProfesPatiRelID");
            columnNamesMap.Add("HealthCareProfessionalRoleRelationID", "HCareProfesRoleRelID");
            columnNamesMap.Add("HealthCareProfessionalSpecialityRelationID", "HCareProfesSpecialityRelID");
            columnNamesMap.Add("HealthCareProfessionalTranID", "HCareProfesTID");
            columnNamesMap.Add("HealthCareProvederCode", "HCareProvederCode");
            columnNamesMap.Add("HealthCareProviderChildID", "HCareProvChildID");
            columnNamesMap.Add("HealthCareProviderChildTranID", "HCareProvChildTID");
            columnNamesMap.Add("HealthCareProviderCode", "HCareProvCode");
            columnNamesMap.Add("HealthCareProviderDescription", "HCareProvDescr");
            columnNamesMap.Add("HealthCareProviderID", "HCareProvID");
            columnNamesMap.Add("HealthCareProviderInstituteOfPublicHealthID", "HCareProvInstOfPubHID");
            columnNamesMap.Add("HealthCareProviderLegalStatusID", "HCareProvLegalStatID");
            columnNamesMap.Add("HealthCareProviderLegalStatusTranID", "HCareProvLegalStatTID");
            columnNamesMap.Add("HealthCareProviderName", "HCareProvName");
            columnNamesMap.Add("HealthCareProviderParentID", "HCareProvParentID");
            columnNamesMap.Add("HealthCareProviderParentTranID", "HCareProvParentTID");
            columnNamesMap.Add("HealthCareProviderPatientRelationID", "HCareProvPatiRelID");
            columnNamesMap.Add("HealthCareProviderRelationID", "HCareProvRelID");
            columnNamesMap.Add("HealthCareProviderSpecialtyID", "HCareProvSpecialtyID");
            columnNamesMap.Add("HealthCareProviderTranID", "HCareProvTID");
            columnNamesMap.Add("HealthCareProviderTypeID", "HCareProvTypID");
            columnNamesMap.Add("HealthCareProviderTypeTranID", "HCareProvTypTID");
            columnNamesMap.Add("HealthCareRoleDescription", "HCareRoleDescr");
            columnNamesMap.Add("HealthCareRoleID", "HCareRoleID");
            columnNamesMap.Add("HealthCareRoleName", "HCareRoleName");
            columnNamesMap.Add("HealthCareRoleOperationRelationID", "HCareRoleOperaRelID");
            columnNamesMap.Add("HealthCareRoleTranID", "HCareRoleTID");
            columnNamesMap.Add("HealthCareSpecialityID", "HCareSpecialityID");
            columnNamesMap.Add("HealthCareSpecialityTranID", "HCareSpecialityTID");
            columnNamesMap.Add("HealthCareSpecializationID", "HCareSpecializationID");
            columnNamesMap.Add("HealthCareSpecializationTranID", "HCareSpecializationTID");
            columnNamesMap.Add("HealthCareSpecialtyID", "HCareSpecialtyID");
            columnNamesMap.Add("HealthCareWorkplaceCode", "HCareWorkplCode");
            columnNamesMap.Add("HealthCareWorkplaceID", "HCareWorkplID");
            columnNamesMap.Add("HealthCareWorkplaceMemberID", "HCareWorkplMembID");
            columnNamesMap.Add("HealthCareWorkplaceName", "HCareWorkplName");
            columnNamesMap.Add("HealthCareWorkplaceSettingID", "HCareWorkplSettID");
            columnNamesMap.Add("HealthCareWorkplaceTranID", "HCareWorkplTID");
            columnNamesMap.Add("HealthCareWorkplaceZdravstvenaPodskupinaDejavnostiRelacijaID", "HCareWorkplZdrPodskDejRelID");
            columnNamesMap.Add("HealthEducationalWorkLocalCommunityID", "HEducatalWorkLocCommID");
            columnNamesMap.Add("HealthEducationContentID", "HEducatContentID");
            columnNamesMap.Add("HealthEducationContractorID", "HEducatContractID");
            columnNamesMap.Add("HealthEducationDiabetologieID", "HEducatDiabetID");
            columnNamesMap.Add("HealthEducationDiabetologieTranID", "HEducatDiabetTID");
            columnNamesMap.Add("HealthEducationFormOfWorkID", "HEducatFormOfWorkID");
            columnNamesMap.Add("HealthEducationID", "HEducatID");
            columnNamesMap.Add("HealthEducationLevelID", "HEducatLevelID");
            columnNamesMap.Add("HealthEducationMediaID", "HEducatMediaID");
            columnNamesMap.Add("HealthEducationMethodID", "HEducatMethID");
            columnNamesMap.Add("HealthEducationPlaceID", "HEducatPlaceID");
            columnNamesMap.Add("HealthEducationPopulationID", "HEducatPopulID");
            columnNamesMap.Add("HealthEducationProfessionalTypeCode", "HEducatProfesTypCode");
            columnNamesMap.Add("HealthEducationProfessionalTypeID", "HEducatProfesTypID");
            columnNamesMap.Add("HealthEducationProfessionalTypeTranID", "HEducatProfesTypTID");
            columnNamesMap.Add("HealthEducationWayOfImplementationID", "HEducatWayOfImplID");
            columnNamesMap.Add("HealthInformationContact", "HealthInformationContact");
            columnNamesMap.Add("HealthInformationPermission", "HealthInformationPermission");
            columnNamesMap.Add("HealthServiceID", "HealthSvcID");
            columnNamesMap.Add("HealthServicesCodeDescription", "HealthSvcsCodeDescr");
            columnNamesMap.Add("HealthServicesDescription", "HealthSvcsDescr");
            columnNamesMap.Add("HealthServiceTranID", "HealthSvcTID");
            columnNamesMap.Add("HealthSocialProblemsInFirstVisitID", "HSocialProblsInFstVisitID");
            columnNamesMap.Add("HealthyDiet", "HealthyDiet");
            columnNamesMap.Add("HealthyDietDate", "HealthyDietDate");
            columnNamesMap.Add("HealthyDietResultID", "HealthyDietResultID");
            columnNamesMap.Add("HealthyDietResultTranID", "HealthyDietResultTID");
            columnNamesMap.Add("HealtInstanceNumber", "HealtInstanceNumber");
            columnNamesMap.Add("Heart", "Heart");
            columnNamesMap.Add("HeartChanges", "HeartChanges");
            columnNamesMap.Add("HeartVascularDiseaseSurveyID", "HeartVascDiseaSurveyID");
            columnNamesMap.Add("HeartVascularDiseaseSurveyTranID", "HeartVascDiseaSurveyTID");
            columnNamesMap.Add("HeartVascularDiseaseSurveyType", "HeartVascDiseaSurveyTyp");
            columnNamesMap.Add("Height", "Height");
            columnNamesMap.Add("Helpers", "Hlps");
            columnNamesMap.Add("HighAge", "HighAge");
            columnNamesMap.Add("HighBloodPressure", "HighBloodPressure");
            columnNamesMap.Add("HighBloodSugar", "HighBloodSugar");
            columnNamesMap.Add("HighCholesterol", "HighCholesterol");
            columnNamesMap.Add("HomePhone", "HomePhone");
            columnNamesMap.Add("HospitaledFrom", "HospitaledFrom");
            columnNamesMap.Add("HospitaledTo", "HospitaledTo");
            columnNamesMap.Add("HospitalSection", "HospitalSection");
            columnNamesMap.Add("HowToTransport", "HowToTrans");
            columnNamesMap.Add("HumanResourceType", "HumanResourceTyp");
            columnNamesMap.Add("HygieneStatusID", "HygieneStatID");
            columnNamesMap.Add("HygieneStatusTranID", "HygieneStatTID");
            columnNamesMap.Add("Hyperlipidemia", "Hyperlipidemia");
            columnNamesMap.Add("ICDCode", "ICDCode");
            columnNamesMap.Add("ICDDescription", "ICDDescr");
            columnNamesMap.Add("ICDDescripton", "ICDDescripton");
            columnNamesMap.Add("ICDID", "ICDID");
            columnNamesMap.Add("ICDTranID", "ICDTID");
            columnNamesMap.Add("ID", "ID");
            columnNamesMap.Add("IdentificationDocumentTypeID", "IdentiDocuTypID");
            columnNamesMap.Add("IdentificationDocumentTypeTranID", "IdentiDocuTypTID");
            columnNamesMap.Add("IdentificationNumber", "IdentiNumber");
            columnNamesMap.Add("IdentifikatorOdgovoraOnLine", "IdentiOdgOnLine");
            columnNamesMap.Add("Identifier", "Identifier");
            columnNamesMap.Add("IdentifierOfPaymentPlace", "IdentifierOfPayPlace");
            columnNamesMap.Add("IDNumberAndNameOfInsuranceCarrier", "IDNumberAndNameOfInsurCarri");
            columnNamesMap.Add("IDNumberOfCard", "IDNumberOfCard");
            columnNamesMap.Add("IDNumberOfPatient", "IDNumberOfPati");
            columnNamesMap.Add("IDRegisterChange", "IDRegistChange");
            columnNamesMap.Add("IDSubscriber", "IDSubscr");
            columnNamesMap.Add("IllnessState", "IllnessState");
            columnNamesMap.Add("ImagedTeeth", "ImagedTeeth");
            columnNamesMap.Add("Ime", "Ime");
            columnNamesMap.Add("IncrementIndex", "IncrementInd");
            columnNamesMap.Add("IndexOfBodyWeight", "IndOfBodyWeight");
            columnNamesMap.Add("InfectiusDiseaseReportID", "InfectiusDiseaRepID");
            columnNamesMap.Add("InformationAboutDisease", "InformationAboutDisea");
            columnNamesMap.Add("InformationProviderCode", "InformationProvCode");
            columnNamesMap.Add("InsertDataDate", "InsertDataDate");
            columnNamesMap.Add("InsertDataTime", "InsertDataTime");
            columnNamesMap.Add("InstitutesID", "InstsID");
            columnNamesMap.Add("Instructions", "Instructions");
            columnNamesMap.Add("InstructionsToExecuter", "InstructionsToExecuter");
            columnNamesMap.Add("InsuranceAmount1", "InsurAmount1");
            columnNamesMap.Add("InsuranceAmount2", "InsurAmount2");
            columnNamesMap.Add("InsuranceBase", "InsurBase");
            columnNamesMap.Add("InsuranceBaseCode", "InsurBaseCode");
            columnNamesMap.Add("InsuranceBaseID", "InsurBaseID");
            columnNamesMap.Add("InsuranceBases", "InsurBases");
            columnNamesMap.Add("InsuranceBaseTranID", "InsurBaseTID");
            columnNamesMap.Add("InsuranceCategoryCode", "InsurCategCode");
            columnNamesMap.Add("InsuranceCategoryID", "InsurCategID");
            columnNamesMap.Add("InsuranceCategoryTranID", "InsurCategTID");
            columnNamesMap.Add("InsuranceCode", "InsurCode");
            columnNamesMap.Add("InsuranceContrbutorRegistrationCompany", "InsurContribRegistCompany");
            columnNamesMap.Add("InsuranceContrbutorRegistrationCompanyName", "InsurContribRegistCompanyName");
            columnNamesMap.Add("InsuranceContributorID", "InsurContribID");
            columnNamesMap.Add("InsuranceContributorRegistration", "InsurContribRegist");
            columnNamesMap.Add("InsuranceContributorTranID", "InsurContribTID");
            columnNamesMap.Add("InsuranceContributorTypeCode", "InsurContribTypCode");
            columnNamesMap.Add("InsuranceContributorTypeID", "InsurContribTypID");
            columnNamesMap.Add("InsuranceContributorTypeTranID", "InsurContribTypTID");
            columnNamesMap.Add("InsuranceName", "InsurName");
            columnNamesMap.Add("InsuranceRegistrationNumber", "InsurRegistNumber");
            columnNamesMap.Add("InsuranceValidityCode", "InsurValidityCode");
            columnNamesMap.Add("InsuranceValidityTypeCode", "InsurValidityTypCode");
            columnNamesMap.Add("InsuranceValidityTypeID", "InsurValidityTypID");
            columnNamesMap.Add("InsuranceValidityTypeTranID", "InsurValidityTypTID");
            columnNamesMap.Add("InsuredPersonType", "InsuredPersTyp");
            columnNamesMap.Add("InsuredPersonTypeCode", "InsuredPersTypCode");
            columnNamesMap.Add("InsuredPersonTypeID", "InsuredPersTypID");
            columnNamesMap.Add("InsuredPersonTypeName", "InsuredPersTypName");
            columnNamesMap.Add("InsuredPersonTypeTranID", "InsuredPersTypTID");
            columnNamesMap.Add("InsurerConfirmationNumber", "InsurerConfirmationNumber");
            columnNamesMap.Add("Int", "Int");
            columnNamesMap.Add("Int1", "Int1");
            columnNamesMap.Add("Int2", "Int2");
            columnNamesMap.Add("Int3", "Int3");
            columnNamesMap.Add("Int4", "Int4");
            columnNamesMap.Add("Int5", "Int5");
            columnNamesMap.Add("Int6", "Int6");
            columnNamesMap.Add("Int7", "Int7");
            columnNamesMap.Add("Int8", "Int8");
            columnNamesMap.Add("Int9", "Int9");
            columnNamesMap.Add("Int10", "Int10");
            columnNamesMap.Add("Int11", "Int11");
            columnNamesMap.Add("InternalAttributeCode", "IntAttrCode");
            columnNamesMap.Add("InternalMeasurementUnit", "IntMeasuUn");
            columnNamesMap.Add("InterventionID", "IntrID");
            columnNamesMap.Add("InterventionTranID", "IntrTID");
            columnNamesMap.Add("Intubation", "Intubation");
            columnNamesMap.Add("InvalidHICID", "InvalHICID");
            columnNamesMap.Add("InvitationDate", "InvitationDate");
            columnNamesMap.Add("InvitationType", "InvitationTyp");
            columnNamesMap.Add("InvoiceAddress", "InvoiAddress");
            columnNamesMap.Add("InvoiceName", "InvoiName");
            columnNamesMap.Add("InvoicePostOfficeID", "InvoiPostOfficeID");
            columnNamesMap.Add("InvoicePostOfficeTranID", "InvoiPostOfficeTID");
            columnNamesMap.Add("InvoicesForIndividualPatients", "InvoisForIndividualPatis");
            columnNamesMap.Add("InvoiceTab", "InvoiTab");
            columnNamesMap.Add("InvoicingLogDokumentiID", "InvoicLogDokuiID");
            columnNamesMap.Add("InvoicingLogID", "InvoicLogID");
            columnNamesMap.Add("InvoicingProgressID", "InvoicProgressID");
            columnNamesMap.Add("IO2", "IO2");
            columnNamesMap.Add("IsActive", "IsActive");
            columnNamesMap.Add("IsBlocked", "IsBlocked");
            columnNamesMap.Add("IschemicHeartDisease", "IschemicHeartDisea");
            columnNamesMap.Add("IsCountryOfConvention", "IsCountryOfConvention");
            columnNamesMap.Add("IsCreator", "IsCreator");
            columnNamesMap.Add("IsFinal", "IsFinal");
            columnNamesMap.Add("IsFinality", "IsFinality");
            columnNamesMap.Add("IsFirstWorkshopService", "IsFstWshopSvc");
            columnNamesMap.Add("IsFuneralCovered", "IsFuneralCovered");
            columnNamesMap.Add("IsInsuranceValid", "IsInsurValid");
            columnNamesMap.Add("IsInternalUser", "IsIntUser");
            columnNamesMap.Add("IsIntervention", "IsIntr");
            columnNamesMap.Add("IsIOZAllowed", "IsIOZAllowed");
            columnNamesMap.Add("IsIrregularPayer", "IsIrregularPay");
            columnNamesMap.Add("IsMain", "IsMain");
            columnNamesMap.Add("IsMTPCovered", "IsMTPCovered");
            columnNamesMap.Add("IsNew", "IsNew");
            columnNamesMap.Add("IsOnline", "IsOnline");
            columnNamesMap.Add("IsPatientHealthy", "IsPatiHealthy");
            columnNamesMap.Add("IsPermanent", "IsPerm");
            columnNamesMap.Add("IsPermanentRent", "IsPermRent");
            columnNamesMap.Add("IsPrimary", "IsPrimary");
            columnNamesMap.Add("IsPSCovered", "IsPSCovered");
            columnNamesMap.Add("IsSickLeaveCovered", "IsSickLeaveCovered");
            columnNamesMap.Add("IssueDate", "IssueDate");
            columnNamesMap.Add("IssuedDocumentID", "IssuedDocuID");
            columnNamesMap.Add("IssuedMTPQuantity", "IssuedMTPQuantity");
            columnNamesMap.Add("IssuedOrderNumber", "IssuedOrderNumber");
            columnNamesMap.Add("IssuedQuantity", "IssuedQuantity");
            columnNamesMap.Add("IssuerDoctorFullName", "IssuerDoctFullName");
            columnNamesMap.Add("IssuerDoctorIVZCode", "IssuerDoctIVZCode");
            columnNamesMap.Add("IssuerDoctorName", "IssuerDoctName");
            columnNamesMap.Add("IssueReason", "IssueReason");
            columnNamesMap.Add("IssueValidTo", "IssueValidTo");
            columnNamesMap.Add("IsSystemUser", "IsSystUser");
            columnNamesMap.Add("IsUrgent", "IsUrge");
            columnNamesMap.Add("IsUrgentRent", "IsUrgeRent");
            columnNamesMap.Add("IVZCode", "IVZCode");
            columnNamesMap.Add("IvzServiceID", "IvzSvcID");
            columnNamesMap.Add("IvzServiceTranID", "IvzSvcTID");
            columnNamesMap.Add("IVZSifraSluzbe", "IVZSifrSluzbe");
            columnNamesMap.Add("IVZSifraZdravnika", "IVZSifrZdravnika");
            columnNamesMap.Add("IVZSluzbaID", "IVZSluzbaID");
            columnNamesMap.Add("IVZSluzbaTranID", "IVZSluzbaTID");
            columnNamesMap.Add("IVZStoritevID", "IVZStoriID");
            columnNamesMap.Add("IVZStoritevTranID", "IVZStoriTID");
            columnNamesMap.Add("IZCreated", "IZCreated");
            columnNamesMap.Add("Izdelovalec", "Izdelovalec");
            columnNamesMap.Add("Izposoja", "Izposoja");
            columnNamesMap.Add("IzpostavaBivaliscaID", "IzpostBivID");
            columnNamesMap.Add("IzpostavaBivaliscaTranID", "IzpostBivTID");
            columnNamesMap.Add("IzpostavaZZZSID", "IzpostZZZSID");
            columnNamesMap.Add("IzpostavaZZZSTranID", "IzpostZZZSTID");
            columnNamesMap.Add("Izpostave", "Izpostave");
            columnNamesMap.Add("IzvorOdlocbeID", "IzvorOdlocbeID");
            columnNamesMap.Add("JePreplacalPZZ", "JePreplacalPZZ");
            columnNamesMap.Add("JobDescription", "JobDescr");
            columnNamesMap.Add("JointCholesterol", "JointCholesterol");
            columnNamesMap.Add("KaderID", "KaderID");
            columnNamesMap.Add("KaderTanID", "KaderTanID");
            columnNamesMap.Add("KaderTranID", "KaderTID");
            columnNamesMap.Add("KadrovskiNormativID", "KadroNormID");
            columnNamesMap.Add("KategorijaID", "KategID");
            columnNamesMap.Add("KategorijaPlacnikaID1", "KategPlacnID1");
            columnNamesMap.Add("KategorijaPlacnikaTranID1", "KategPlacnTID1");
            columnNamesMap.Add("KategorijaPodlagaZavarovanjaRelacijaID", "KategPodlaZavarRelID");
            columnNamesMap.Add("KategorijaTranID", "KategTID");
            columnNamesMap.Add("KategorijaZavarovanjaID", "KategZavarID");
            columnNamesMap.Add("KategorijaZavarovanjaTranID", "KategZavarTID");
            columnNamesMap.Add("KindOfDoctorPersonalAlternateID", "KOfDoctPersAltID");
            columnNamesMap.Add("KindOfDoctorPersonalAlternatePrescriberID", "KOfDoctPersAltPrescrID");
            columnNamesMap.Add("KindOfDoctorPersonalAlternateTranID", "KOfDoctPersAltTID");
            columnNamesMap.Add("KindOfDoctorPersonalMandateAlternateID", "KOfDoctPersMandAltID");
            columnNamesMap.Add("KindOfDoctorPersonalPrescriberNMPAlternateID", "KOfDoctPersPrescrNMPAltID");
            columnNamesMap.Add("Kolicina", "Kolicina");
            columnNamesMap.Add("Komentar", "Komentar");
            columnNamesMap.Add("KoncnaDiagnoza", "KoncnaDiagnoza");
            columnNamesMap.Add("KontrolaNaPodlagoMTPID", "KontrolaNaPodlagoMTPID");
            columnNamesMap.Add("KontrolaNaStatus", "KontrolaNaStat");
            columnNamesMap.Add("Krg", "Krg");
            columnNamesMap.Add("KriterijZaPrilaganjeSpecifikacijID", "KritZaPrilagSpecID");
            columnNamesMap.Add("KriterijZaPrilaganjeSpecifikacijTranID", "KritZaPrilagSpecTID");
            columnNamesMap.Add("KzzCardNumber", "KzzCardNumber");
            columnNamesMap.Add("KzzCardVersion", "KzzCardVersion");
            columnNamesMap.Add("LabCode", "LabCode");
            columnNamesMap.Add("LabName", "LabName");
            columnNamesMap.Add("LastChange", "LastChange");
            columnNamesMap.Add("LastName", "LastName");
            columnNamesMap.Add("LastOrderState", "LastOrderState");
            columnNamesMap.Add("LastStateID", "LastStateID");
            columnNamesMap.Add("LDLCholesterol", "LDLCholesterol");
            columnNamesMap.Add("LegacyIdentifikator", "LegacyIdentifikator");
            columnNamesMap.Add("Level", "Level");
            columnNamesMap.Add("ListCodeColumn", "ListCodeColumn");
            columnNamesMap.Add("ListDataSource", "ListDataSource");
            columnNamesMap.Add("ListDisplayColumn", "ListDisplayColumn");
            columnNamesMap.Add("ListOfInfectiousDiagnosisDoctorCode", "ListOfInfectDiagsDoctCode");
            columnNamesMap.Add("ListOfInfectiousDiagnosisDoctorDescription", "ListOfInfectDiagsDoctDescr");
            columnNamesMap.Add("ListOfInfectiousDiagnosisID", "ListOfInfectDiagsID");
            columnNamesMap.Add("ListOfInfectiousDiagnosisTranID", "ListOfInfectDiagsTID");
            columnNamesMap.Add("ListValues", "ListValues");
            columnNamesMap.Add("LocationCode", "LocationCode");
            columnNamesMap.Add("LogClosed", "LogClosed");
            columnNamesMap.Add("LogID", "LogID");
            columnNamesMap.Add("Lokacija", "Lokacija");
            columnNamesMap.Add("Long1", "Lng1");
            columnNamesMap.Add("Long2", "Lng2");
            columnNamesMap.Add("LowAge", "LowAge");
            columnNamesMap.Add("Lungs", "Lungs");
            columnNamesMap.Add("LungsChanges", "LungsChanges");
            columnNamesMap.Add("MachineName", "MachineName");
            columnNamesMap.Add("MagistralMedicationID", "MagistralMedID");
            columnNamesMap.Add("MagistralMedicationTranID", "MagistralMedTID");
            columnNamesMap.Add("MaidenName", "MaidenName");
            columnNamesMap.Add("MaintenanceApprovalCode", "MaintenanceApprovalCode");
            columnNamesMap.Add("MaintenancePrice", "MaintenancePrice");
            columnNamesMap.Add("MajorVersion", "MajorVersion");
            columnNamesMap.Add("MaksimalnaKolicinaNaObisk", "MaksimalnaKolicinaNaObisk");
            columnNamesMap.Add("Mandatory", "Mandatory");
            columnNamesMap.Add("ManifactureMTPDescription", "ManifactureMTPDescr");
            columnNamesMap.Add("ManifactureMTPNumber", "ManifactureMTPNumber");
            columnNamesMap.Add("ManufacturerName", "ManufacturerName");
            columnNamesMap.Add("ManufacturerNumber", "ManufacturerNumber");
            columnNamesMap.Add("MaritalStatusID", "MaritalStatID");
            columnNamesMap.Add("MaritalStatusTranID", "MaritalStatTID");
            columnNamesMap.Add("MaterialAmmount", "MaterialAmmount");
            columnNamesMap.Add("Maticni", "Maticni");
            columnNamesMap.Add("MeansOfTransportID", "MeansOfTransID");
            columnNamesMap.Add("MeasurementUnit", "MeasuUn");
            columnNamesMap.Add("MedicalDiabeticEducationID", "MedDiabetEducatID");
            columnNamesMap.Add("MedicalTehnicalAidCode", "MedTehniAidCode");
            columnNamesMap.Add("MedicalTehnicalAidDescription", "MedTehniAidDescr");
            columnNamesMap.Add("MedicalTehnicalAidID", "MedTehniAidID");
            columnNamesMap.Add("MedicalTehnicalAidTranID", "MedTehniAidTID");
            columnNamesMap.Add("MedicalUnit", "MedUnit");
            columnNamesMap.Add("MedicationCode", "MedCode");
            columnNamesMap.Add("MedicationCodeListName", "MedCodeListName");
            columnNamesMap.Add("MedicationDescription", "MedDescr");
            columnNamesMap.Add("MedicationGroup", "MedGroup");
            columnNamesMap.Add("MedicationID", "MedID");
            columnNamesMap.Add("MedicationName", "MedName");
            columnNamesMap.Add("MedicationType", "MedTyp");
            columnNamesMap.Add("MedicinskoTehnicenPripomocekCode", "MedTehPripCode");
            columnNamesMap.Add("MedicinskoTehnicenPripomocekDescription", "MedTehPripDescr");
            columnNamesMap.Add("MedicinskoTehnicenPripomocekID", "MedTehPripID");
            columnNamesMap.Add("MedicinskoTehnicenPripomocekTrajnostnaDobaRelacijaID", "MedTehPripTrajDobaRelID");
            columnNamesMap.Add("MedicinskoTehnicenPripomocekTranID", "MedTehPripTID");
            columnNamesMap.Add("MesecniDokument", "MesecniDoku");
            columnNamesMap.Add("Message", "Message");
            columnNamesMap.Add("MetalAmmount", "MetalAmmount");
            columnNamesMap.Add("MethodName", "MethName");
            columnNamesMap.Add("MiddleName", "MiddleName");
            columnNamesMap.Add("MinorVersion", "MinorVersion");
            columnNamesMap.Add("MobilePhone", "MobilePhone");
            columnNamesMap.Add("ModifiedDate", "ModifiedDate");
            columnNamesMap.Add("MorbidityGroup", "MorbidityGroup");
            columnNamesMap.Add("MTPAcceptanceDate", "MTPAcceptanceDate");
            columnNamesMap.Add("MTPID", "MTPID");
            columnNamesMap.Add("MTPOrderFormDocumentID", "MTPOrderFormDocuID");
            columnNamesMap.Add("MTPOrderFormSummaryDetailID", "MTPOrderFormSummDetailID");
            columnNamesMap.Add("MTPOrderFormSummaryID", "MTPOrderFormSummID");
            columnNamesMap.Add("MunicipalityCode", "MunicipalityCode");
            columnNamesMap.Add("MunicipalityID", "MunicipalityID");
            columnNamesMap.Add("MunicipalityName", "MunicipalityName");
            columnNamesMap.Add("MunicipalityTranID", "MunicipalityTID");
            columnNamesMap.Add("NacinDoplacilaID", "NacinDoplID");
            columnNamesMap.Add("NacinDoplacilaObrazciID", "NacinDoplObrazID");
            columnNamesMap.Add("NacinDoplacilaTranID", "NacinDoplTID");
            columnNamesMap.Add("NacinIskanjaPodatkovOZZID", "NacinIskanPodatOZZID");
            columnNamesMap.Add("NacinPridobivanjaPodatkovID", "NacinPridobPodatID");
            columnNamesMap.Add("NacinPridobivanjaPodatkovTranID", "NacinPridobPodatTID");
            columnNamesMap.Add("Name", "Name");
            columnNamesMap.Add("NamenDostopaBrezKZZID", "NamenDostopaBrezKZZID");
            columnNamesMap.Add("NapotnaVrstaZdravstvenePoddejavnostiID", "NapotnaVrsZdrPodID");
            columnNamesMap.Add("NapotnaVrstaZdravstvenePoddejavnostiTranID", "NapotnaVrsZdrPodTID");
            columnNamesMap.Add("NapotnaVrstaZdravstveneDejavnostiID", "NapotnaVrsZdrDejID");
            columnNamesMap.Add("NapotnaVrstaZdravstveneDejavnostiTranID", "NapotnaVrsZdrDejTID");
            columnNamesMap.Add("NapotnaZdravstvenaPodskupinaDejavnostiID", "NapotnaZdrPodskDejID");
            columnNamesMap.Add("NapotnaZdravstvenaPodskupinaDejavnostiTranID", "NapotnaZdrPodskDejTID");
            columnNamesMap.Add("NapotnaZdravstvenaDejavnostID", "NapotnaZdrDejID");
            columnNamesMap.Add("NapotnaZdravstvenaDejavnostTranID", "NapotnaZdrDejTID");
            columnNamesMap.Add("NapotniZdravnik", "NapotniZdravnik");
            columnNamesMap.Add("NapotnoDelovisce", "NapotnoDelovisce");
            columnNamesMap.Add("Narcotic", "Narcotic");
            columnNamesMap.Add("NarcoticCode", "NarcoticCode");
            columnNamesMap.Add("Naziv", "Naziv");
            columnNamesMap.Add("NazivDokumenta", "NazivDokua");
            columnNamesMap.Add("NazivObracunskegaDokumenta", "NazivObracDokua");
            columnNamesMap.Add("NextVaccination", "NextVaccin");
            columnNamesMap.Add("NosilecPZZID", "NosilecPZZID");
            columnNamesMap.Add("NosilecPZZTranID", "NosilecPZZTID");
            columnNamesMap.Add("Note", "Note");
            columnNamesMap.Add("NoteName", "NoteName");
            columnNamesMap.Add("NoTrafficAccident", "NoTrafficAccident");
            columnNamesMap.Add("NoTransport", "NoTrans");
            columnNamesMap.Add("NotReplaceable", "NotReplaceable");
            columnNamesMap.Add("NumberOfDecision", "NumberOfDecis");
            columnNamesMap.Add("NumberOfDoctor", "NumberOfDoct");
            columnNamesMap.Add("NumberOfFTHOrderForm", "NumberOfFTHOrderForm");
            columnNamesMap.Add("NumberOfHoursPerDay", "NumberOfHoursPerDay");
            columnNamesMap.Add("NumberOfMonths", "NumberOfMonths");
            columnNamesMap.Add("NumberOfOrder", "NumberOfOrder");
            columnNamesMap.Add("NumberOfOrderedService", "NumberOfOrderedSvc");
            columnNamesMap.Add("NumberOfPatients", "NumberOfPatis");
            columnNamesMap.Add("Nurse2ID", "Nurse2ID");
            columnNamesMap.Add("Nurse2TranID", "Nurse2TID");
            columnNamesMap.Add("ObdobjeDo", "ObdobjeDo");
            columnNamesMap.Add("ObdobjeOd", "ObdobjeOd");
            columnNamesMap.Add("ObiskDO", "ObiskDO");
            columnNamesMap.Add("ObiskID", "ObiskID");
            columnNamesMap.Add("ObiskOD", "ObiskOD");
            columnNamesMap.Add("ObjectiveNote", "ObjectiveNote");
            columnNamesMap.Add("ObligatoryInsuranceOldestActiveDate", "ObligInsurOldestActiveDate");
            columnNamesMap.Add("ObligatoryInsuranceValidTo", "ObligInsurValidTo");
            columnNamesMap.Add("ObmocnaEnotaZZZSID", "ObmocEnotaZZZSID");
            columnNamesMap.Add("ObmocnaEnotaZZZSTranID", "ObmocEnotaZZZSTID");
            columnNamesMap.Add("ObracunskiDokumentID", "ObracDokuID");
            columnNamesMap.Add("ObracunskiDokumentTranID", "ObracDokuTID");
            columnNamesMap.Add("ObradaCancel", "ObradaCancel");
            columnNamesMap.Add("ObradaCompleted", "ObradaCompleted");
            columnNamesMap.Add("ObradaEnd", "ObradaEnd");
            columnNamesMap.Add("ObradaError", "ObradaError");
            columnNamesMap.Add("ObradaPlacniciAllCount", "ObradaPlacniciAllCount");
            columnNamesMap.Add("ObradaProgressCount", "ObradaProgressCount");
            columnNamesMap.Add("ObradaStart", "ObradaStart");
            columnNamesMap.Add("ObradaStatus", "ObradaStat");
            columnNamesMap.Add("ObradaTimeStart", "ObradaTimeStart");
            columnNamesMap.Add("ObradiStoritveDo", "ObradiStoritveDo");
            columnNamesMap.Add("ObsegKritjaIzOZZID", "ObsegKritjaIzOZZID");
            columnNamesMap.Add("ObservationEntityTypeID", "ObservEntityTypID");
            columnNamesMap.Add("ObservationID", "ObservID");
            columnNamesMap.Add("ObserverID", "ObserverID");
            columnNamesMap.Add("ObveznostPodatka", "ObvezstPodatka");
            columnNamesMap.Add("ObveznoZdravstvenoZavarovanjeVCelotiID", "ObvezZdrZavarVCelotiID");
            columnNamesMap.Add("ObveznoZZVCelotiID", "ObvezZZVCelotiID");
            columnNamesMap.Add("ObveznoZZVCelotiTranID", "ObvezZZVCelotiTID");
            columnNamesMap.Add("OccupationalClassificationID", "OccupalClassID");
            columnNamesMap.Add("OccupationalClassificationTranID", "OccupalClassTID");
            columnNamesMap.Add("OccupationClasificationID", "OccupClasificationID");
            columnNamesMap.Add("OccupationClasificationTranID", "OccupClasificationTID");
            columnNamesMap.Add("OfficialName", "OfficialName");
            columnNamesMap.Add("OldCode", "OldCode");
            columnNamesMap.Add("OperationGroupID", "OperaGroupID");
            columnNamesMap.Add("OperationID", "OperaID");
            columnNamesMap.Add("OperationTranID", "OperaTID");
            columnNamesMap.Add("OpombaObiska", "OpombaObiska");
            columnNamesMap.Add("OpombaStoritve", "OpombaStoritve");
            columnNamesMap.Add("OpravljenaStoritevErrorOpis", "OpravStoriErrorOpis");
            columnNamesMap.Add("OpravljenaStoritevErrorTranID", "OpravStoriErrorTID");
            columnNamesMap.Add("OpravljenaStoritevID", "OpravStoriID");
            columnNamesMap.Add("OpravljenaStoritevObradaID", "OpravStoriObradaID");
            columnNamesMap.Add("OpravljenaStoritevPromeneID", "OpravStoriPromeneID");
            columnNamesMap.Add("OpravljenaStoritevRelationID", "OpravStoriRelID");
            columnNamesMap.Add("OpravljenaStoritevStatusLogID", "OpravStoriStatLogID");
            columnNamesMap.Add("OpravljenaStoritevTranID", "OpravStoriTID");
            columnNamesMap.Add("OrderApproved", "OrderApproved");
            columnNamesMap.Add("OrderDetailID", "OrderDetailID");
            columnNamesMap.Add("OrderEncounterID", "OrderEncounID");
            columnNamesMap.Add("OrderID", "OrderID");
            columnNamesMap.Add("OrderIndex", "OrderInd");
            columnNamesMap.Add("OrderNumber", "OrderNumber");
            columnNamesMap.Add("OrderState", "OrderState");
            columnNamesMap.Add("OrderStateID", "OrderStateID");
            columnNamesMap.Add("OrderStatusID", "OrderStatID");
            columnNamesMap.Add("OrderTranID", "OrderTID");
            columnNamesMap.Add("OrderType", "OrderTyp");
            columnNamesMap.Add("OrderValidFrom", "OrderValidFrom");
            columnNamesMap.Add("OrderValidTo", "OrderValidTo");
            columnNamesMap.Add("OrganizacijskaEnotaID", "OrganizacijskaEnotaID");
            columnNamesMap.Add("OrganizacijskaEnotaTranID", "OrganizacijskaEnotaTID");
            columnNamesMap.Add("OrganizationalUnit", "OrganizUnit");
            columnNamesMap.Add("OriginalOrderTranID", "OriginalOrderTID");
            columnNamesMap.Add("OstaliPlacnici", "OstaliPlacnici");
            columnNamesMap.Add("Other", "Other");
            columnNamesMap.Add("OtherDescription", "OtherDescr");
            columnNamesMap.Add("OtherHeartDisease", "OtherHeartDisea");
            columnNamesMap.Add("OtherInsuranceTypeID", "OtherInsurTypID");
            columnNamesMap.Add("OtherInsuranceTypeTranID", "OtherInsurTypTID");
            columnNamesMap.Add("OtherTherapyID", "OtherTherapyID");
            columnNamesMap.Add("OverpaidInsuranceValidFrom", "OverpaidInsurValidFrom");
            columnNamesMap.Add("OversensitivityProbability", "OversensitivityProbability");
            columnNamesMap.Add("OwnerFirstName", "OwnerFstName");
            columnNamesMap.Add("OwnerHealthCareWorkplaceID", "OwnerHCareWorkplID");
            columnNamesMap.Add("OwnerHealthCareWorkplaceTranID", "OwnerHCareWorkplTID");
            columnNamesMap.Add("OwnerIVZCode", "OwnerIVZCode");
            columnNamesMap.Add("OwnerLastName", "OwnerLastName");
            columnNamesMap.Add("OwnerMiddleName", "OwnerMiddleName");
            columnNamesMap.Add("OwnerTitleAsPrefix", "OwnerTitleAsPrefix");
            columnNamesMap.Add("OwnerTitleAsSuffix", "OwnerTitleAsSuffix");
            columnNamesMap.Add("OZZErrorCode", "OZZErrorCode");
            columnNamesMap.Add("OZZVeljaDo", "OZZVeljaDo");
            columnNamesMap.Add("Datum1", "Datum1");
            columnNamesMap.Add("Datum1Opis", "Datum1Opis");
            columnNamesMap.Add("P_0_19_F", "P_0_19_F");
            columnNamesMap.Add("P_0_19_M", "P_0_19_M");
            columnNamesMap.Add("P_0_6_F", "P_0_6_F");
            columnNamesMap.Add("P_0_6_M", "P_0_6_M");
            columnNamesMap.Add("P_10_14_F", "P_10_14_F");
            columnNamesMap.Add("P_10_14_M", "P_10_14_M");
            columnNamesMap.Add("P_15_19_F", "P_15_19_F");
            columnNamesMap.Add("P_15_19_M", "P_15_19_M");
            columnNamesMap.Add("P_20_29_F", "P_20_29_F");
            columnNamesMap.Add("P_20_29_M", "P_20_29_M");
            columnNamesMap.Add("P_20_Students_F", "P_20_Students_F");
            columnNamesMap.Add("P_20_Students_M", "P_20_Students_M");
            columnNamesMap.Add("P_30_39_F", "P_30_39_F");
            columnNamesMap.Add("P_30_39_M", "P_30_39_M");
            columnNamesMap.Add("P_40_49_F", "P_40_49_F");
            columnNamesMap.Add("P_40_49_M", "P_40_49_M");
            columnNamesMap.Add("P_50_59_F", "P_50_59_F");
            columnNamesMap.Add("P_50_59_M", "P_50_59_M");
            columnNamesMap.Add("P_60_69_F", "P_60_69_F");
            columnNamesMap.Add("P_60_69_M", "P_60_69_M");
            columnNamesMap.Add("P_7_9_F", "P_7_9_F");
            columnNamesMap.Add("P_7_9_M", "P_7_9_M");
            columnNamesMap.Add("P_70_F", "P_70_F");
            columnNamesMap.Add("P_70_M", "P_70_M");
            columnNamesMap.Add("P_Adults_F", "P_Adults_F");
            columnNamesMap.Add("P_Adults_M", "P_Adults_M");
            columnNamesMap.Add("P_Educators_F", "P_Educators_F");
            columnNamesMap.Add("P_Educators_M", "P_Educators_M");
            columnNamesMap.Add("P_HealthProfessionals_F", "P_HealthProfess_F");
            columnNamesMap.Add("P_HealthProfessionals_M", "P_HealthProfess_M");
            columnNamesMap.Add("P_Other_F", "P_Other_F");
            columnNamesMap.Add("P_Other_M", "P_Other_M");
            columnNamesMap.Add("P_PreSchool_F", "P_PreSchool_F");
            columnNamesMap.Add("P_PreSchool_M", "P_PreSchool_M");
            columnNamesMap.Add("P_School_F", "P_School_F");
            columnNamesMap.Add("P_School_M", "P_School_M");
            columnNamesMap.Add("P_Students_F", "P_Students_F");
            columnNamesMap.Add("P_Students_M", "P_Students_M");
            columnNamesMap.Add("P_Teachers_F", "P_Teachers_F");
            columnNamesMap.Add("P_Teachers_M", "P_Teachers_M");
            columnNamesMap.Add("P_Universal_F", "P_Universal_F");
            columnNamesMap.Add("P_Universal_M", "P_Universal_M");
            columnNamesMap.Add("PacientID", "PacientID");
            columnNamesMap.Add("PacientName", "PacientName");
            columnNamesMap.Add("PacientTranID", "PacientTID");
            columnNamesMap.Add("Package", "Package");
            columnNamesMap.Add("PackageData", "PackageData");
            columnNamesMap.Add("PackageName", "PackageName");
            columnNamesMap.Add("PackageType", "PackageTyp");
            columnNamesMap.Add("PackagingQuantity", "PackagingQuantity");
            columnNamesMap.Add("PaketPZZ", "PaketPZZ");
            columnNamesMap.Add("ParentAttributeGroupID", "ParentAttrGroupID");
            columnNamesMap.Add("ParentID", "ParentID");
            columnNamesMap.Add("ParentPriceListID", "ParentPriceListID");
            columnNamesMap.Add("ParentPriceListTranID", "ParentPriceListTID");
            columnNamesMap.Add("ParentTranID", "ParentTID");
            columnNamesMap.Add("ParodontalStatusID", "ParodontalStatID");
            columnNamesMap.Add("ParodontalStatusTransID", "ParodontalStatTransID");
            columnNamesMap.Add("Part1", "Part1");
            columnNamesMap.Add("Part2", "Part2");
            columnNamesMap.Add("Patient1ID", "Pati1ID");
            columnNamesMap.Add("Patient2ID", "Pati2ID");
            columnNamesMap.Add("PatientAllergyID", "PatiAllergyID");
            columnNamesMap.Add("PatientArrivalReasoneID", "PatiArrivReasID");
            columnNamesMap.Add("PatientCardIndexID", "PatiCardIndID");
            columnNamesMap.Add("PatientChronicDiseaseID", "PatiChronicDiseaID");
            columnNamesMap.Add("PatientContactPersonID", "PatiContactPersID");
            columnNamesMap.Add("PatientContactPersonTypeID", "PatiContactPersTypID");
            columnNamesMap.Add("PatientCustodianID", "PatiCustodID");
            columnNamesMap.Add("PatientDataRetrievalTypeID", "PatiDataRetrievalTypID");
            columnNamesMap.Add("PatientDataRetrievalTypeTranID", "PatiDataRetrievalTypTID");
            columnNamesMap.Add("PatientEUDataID", "PatiEUDataID");
            columnNamesMap.Add("PatientExternalId", "PatiExtId");
            columnNamesMap.Add("PatientID", "PatiID");
            columnNamesMap.Add("PatientInsuranceID", "PatiInsurID");
            columnNamesMap.Add("PatientLegacyIdentityID", "PatiLegacyIdentID");
            columnNamesMap.Add("PatientMedicalTehnicalAidID", "PatiMedTehniAidID");
            columnNamesMap.Add("PatientMedicationReactionID", "PatiMedReactID");
            columnNamesMap.Add("PatientName", "PatiName");
            columnNamesMap.Add("PatientRelationID", "PatiRelID");
            columnNamesMap.Add("PatientTran1ID", "PatiTran1ID");
            columnNamesMap.Add("PatientTran2ID", "PatiTran2ID");
            columnNamesMap.Add("PatientTranID", "PatiTID");
            columnNamesMap.Add("PatientUnhealthyHabitID", "PatiUnhealtHabitID");
            columnNamesMap.Add("PayerAtPoliceDemandedExaminationID", "PayAtPoliceDemandExamiID");
            columnNamesMap.Add("PaymentDue", "PayDue");
            columnNamesMap.Add("PaymentMethodID", "PayMethID");
            columnNamesMap.Add("PaymentMethodTranID", "PayMethTID");
            columnNamesMap.Add("PayMethod", "PayMeth");
            columnNamesMap.Add("PayMethodCode", "PayMethCode");
            columnNamesMap.Add("PayMethodTranID", "PayMethTID");
            columnNamesMap.Add("PercentageOfPhysicalImpairment", "PercentOfPhysicalImpairment");
            columnNamesMap.Add("PerformanceForHVDSID", "PerformForHVDSID");
            columnNamesMap.Add("PerformanceLogID", "PerformLogID");
            columnNamesMap.Add("Period", "Period");
            columnNamesMap.Add("PeripheralArterialPulse", "PeriphArterialPulse");
            columnNamesMap.Add("PeripheralArterialPulseChanges", "PeriphArterialPulseChanges");
            columnNamesMap.Add("PermanentMedicationTherapyID", "PermMedTherapyID");
            columnNamesMap.Add("PermanentMTPID", "PermMTPID");
            columnNamesMap.Add("PermanentSubjectiveNoteID", "PermSubjecNoteID");
            columnNamesMap.Add("PermanentSubjectiveNoteType", "PermSubjecNoteTyp");
            columnNamesMap.Add("PermanentTeethCount", "PermTeethCount");
            columnNamesMap.Add("Personal", "Pers");
            columnNamesMap.Add("PersonalDoctorType", "PersDoctTyp");
            columnNamesMap.Add("PharmaceuticalShape", "PharmaceuticalShape");
            columnNamesMap.Add("PharmacyCode", "PharmacyCode");
            columnNamesMap.Add("PhoneNumber", "PhoneNumber");
            columnNamesMap.Add("PhysicalActivity", "PhysicalActivity");
            columnNamesMap.Add("PhysicalActivityDate", "PhysicalActivityDate");
            columnNamesMap.Add("PhysicalActivityResultID", "PhysicalActivityResultID");
            columnNamesMap.Add("PhysicalActivityResultTranID", "PhysicalActivityResultTID");
            columnNamesMap.Add("PhysicalInactivity", "PhysicalInactivity");
            columnNamesMap.Add("Placan", "Placan");
            columnNamesMap.Add("PlacesOfInterventionID", "PlacesOfIntrID");
            columnNamesMap.Add("Placnik", "Placnik");
            columnNamesMap.Add("Placnik1TipID", "Placnik1TipID");
            columnNamesMap.Add("Placnik1TipTranID", "Placnik1TipTID");
            columnNamesMap.Add("Placnik2TipID", "Placnik2TipID");
            columnNamesMap.Add("Placnik2TipTranID", "Placnik2TipTID");
            columnNamesMap.Add("PlacnikID", "PlacnikID");
            columnNamesMap.Add("PlacnikID1", "PlacnikID1");
            columnNamesMap.Add("PlacnikID2", "PlacnikID2");
            columnNamesMap.Add("PlacnikTranID", "PlacnikTID");
            columnNamesMap.Add("PlacnikTranID1", "PlacnikTID1");
            columnNamesMap.Add("PlacnikTranID2", "PlacnikTID2");
            columnNamesMap.Add("Ploskve", "Ploskve");
            columnNamesMap.Add("PodlagaZavarovanjaID", "PodlaZavarID");
            columnNamesMap.Add("PodlagaZavarovanjaTranID", "PodlaZavarTID");
            columnNamesMap.Add("Poisoning", "Poisoning");
            columnNamesMap.Add("Police", "Police");
            columnNamesMap.Add("Policy", "Policy");
            columnNamesMap.Add("PolicyAppearances", "PolicyAppearances");
            columnNamesMap.Add("PolicyNumber", "PolicyNumber");
            columnNamesMap.Add("PooblasceniZdravnik", "PooblasceniZdravnik");
            columnNamesMap.Add("PoorNutrition", "PoorNutrition");
            columnNamesMap.Add("PopravilaVzdrzevanja", "PopravilaVzdrzevanja");
            columnNamesMap.Add("Populacija", "Populacija");
            columnNamesMap.Add("PopulationFemale", "PopulFemale");
            columnNamesMap.Add("PopulationMale", "PopulMale");
            columnNamesMap.Add("PopulationPoints", "PopulPoints");
            columnNamesMap.Add("PopulationQuantity", "PopulQuantity");
            columnNamesMap.Add("PopulationTotal", "PopulTotal");
            columnNamesMap.Add("Popust", "Popust");
            columnNamesMap.Add("PorociloID", "PorociloID");
            columnNamesMap.Add("PorociloTranID", "PorociloTID");
            columnNamesMap.Add("PorpuseOfEncounterIKID", "PorpOfEncounIKID");
            columnNamesMap.Add("PorpuseOfEncounterIKTranID", "PorpOfEncounIKTID");
            columnNamesMap.Add("PostalCode", "PostalCode");
            columnNamesMap.Add("PostalName", "PostalName");
            columnNamesMap.Add("Postavka1", "Postavka1");
            columnNamesMap.Add("Postavka2", "Postavka2");
            columnNamesMap.Add("Postavka3", "Postavka3");
            columnNamesMap.Add("PostnaStevilkaInKraj", "PostnaStevilkaInKraj");
            columnNamesMap.Add("PostOffice", "PostOffice");
            columnNamesMap.Add("PostOfficeID", "PostOfficeID");
            columnNamesMap.Add("PostOfficeTranID", "PostOfficeTID");
            columnNamesMap.Add("PovecanaZahtevnostObravnaveID", "PovecZahtevnostObravID");
            columnNamesMap.Add("PredlogZobnoproteticneRehabilitacije", "PredlZobprotRehab");
            columnNamesMap.Add("PrepaymentAmount", "PrepayAmount");
            columnNamesMap.Add("PrepaymentStatusID", "PrepayStatID");
            columnNamesMap.Add("PrescriptionMark", "PrescrMark");
            columnNamesMap.Add("PrescriptionPayerID", "PrescrPayID");
            columnNamesMap.Add("PrescriptionPayerTranID", "PrescrPayTID");
            columnNamesMap.Add("PrescriptionType", "PrescrTyp");
            columnNamesMap.Add("PreventivaKurativa", "PreventivaKurativa");
            columnNamesMap.Add("PriceListID", "PriceListID");
            columnNamesMap.Add("PriceListTranID", "PriceListTID");
            columnNamesMap.Add("Priimek", "Priimek");
            columnNamesMap.Add("Printed", "Printed");
            columnNamesMap.Add("Priority", "Priority");
            columnNamesMap.Add("Proccessed", "Proccessed");
            columnNamesMap.Add("Process", "Process");
            columnNamesMap.Add("ProcessCompleted", "ProcessCompleted");
            columnNamesMap.Add("ProcessCompletedValue", "ProcessCompletedValue");
            columnNamesMap.Add("ProcessState", "ProcessState");
            columnNamesMap.Add("ProfesionalNoteCategoryID", "ProfesNoteCategID");
            columnNamesMap.Add("ProfesionalNoteCategoryTranID", "ProfesNoteCategTID");
            columnNamesMap.Add("ProfesionalNotesID", "ProfesNotesID");
            columnNamesMap.Add("ProfessionalIVZCode", "ProfesIVZCode");
            columnNamesMap.Add("ProjectedVulnerability", "ProjectedVulnerability");
            columnNamesMap.Add("ProviderID", "ProvID");
            columnNamesMap.Add("ProviderTranID", "ProvTID");
            columnNamesMap.Add("ProviderZZZSCode", "ProvZZZSCode");
            columnNamesMap.Add("PrviObisk", "PrviObisk");
            columnNamesMap.Add("PsychoActiveSubstanceYes", "PsychoActiveSubstanceYes");
            columnNamesMap.Add("PurposeOfDecisionID", "PurpOfDecisID");
            columnNamesMap.Add("PurposeOfDecisionTranID", "PurpOfDecisTID");
            columnNamesMap.Add("PzrCode", "PzrCode");
            columnNamesMap.Add("PZZErrorCode", "PZZErrorCode");
            columnNamesMap.Add("PZZVeljaDo", "PZZVeljaDo");
            columnNamesMap.Add("PZZVeljaOd", "PZZVeljaOd");
            columnNamesMap.Add("Quantity", "Quantity");
            columnNamesMap.Add("QuantityNumber", "QuantityNumber");
            columnNamesMap.Add("RateIK", "RateIK");
            columnNamesMap.Add("RazlogDostopaBrezKZZID", "RazlDostopaBrezKZZID");
            columnNamesMap.Add("RazlogObravnave", "RazlObrav");
            columnNamesMap.Add("RazlogObravnaveID", "RazlObravID");
            columnNamesMap.Add("RazlogObravnaveObrazciID", "RazlObravObrazID");
            columnNamesMap.Add("RazlogObravnaveObrazciNarocilnicaID", "RazlObravObrazNarocID");
            columnNamesMap.Add("RazlogObravnavePredlogZdravnikuID", "RazlObravPredlZdrID");
            columnNamesMap.Add("RazlogObravnaveTranID", "RazlObravTID");
            columnNamesMap.Add("RazlogObravnaveTransplantacijaID", "RazlObravTransplID");
            columnNamesMap.Add("RazlogZadrzanostiID", "RazlZadrzanostiID");
            columnNamesMap.Add("ReactionType", "ReactTyp");
            columnNamesMap.Add("RealizacijaID", "RealizID");
            columnNamesMap.Add("ReasonForNonUrgentTransportID", "ReasonForNonUrgeTransID");
            columnNamesMap.Add("ReasonICDID", "ReasonICDID");
            columnNamesMap.Add("ReasonICDTranID", "ReasonICDTID");
            columnNamesMap.Add("ReasonOfTreatmentID", "ReasonOfTreatID");
            columnNamesMap.Add("ReasonOfTreatmentTranID", "ReasonOfTreatTID");
            columnNamesMap.Add("ReceiveCallDate", "ReceiveCallDate");
            columnNamesMap.Add("ReceiveCallTime", "ReceiveCallTime");
            columnNamesMap.Add("ReclamationDate", "ReclamationDate");
            columnNamesMap.Add("RecordDate", "RecordDate");
            columnNamesMap.Add("ReferralNumber", "ReferralNumber");
            columnNamesMap.Add("RegisterChangeID", "RegistChangeID");
            columnNamesMap.Add("RegisterName", "RegistName");
            columnNamesMap.Add("RegisterSubscriptionID", "RegistSubscrID");
            columnNamesMap.Add("RegistrationNumber", "RegistNumber");
            columnNamesMap.Add("RegistrskaStevilka", "RegistrskaStevilka");
            columnNamesMap.Add("RelatedPatientID", "RelatedPatiID");
            columnNamesMap.Add("RelatedPatientTranID", "RelatedPatiTID");
            columnNamesMap.Add("RelatedPersonDescription", "RelatedPersDescr");
            columnNamesMap.Add("RelationType", "RelTyp");
            columnNamesMap.Add("Relatives", "Relatives");
            columnNamesMap.Add("RelyingPartyID", "RelyingPartyID");
            columnNamesMap.Add("Remark", "Remark");
            columnNamesMap.Add("RenewablePrescription", "RenewablePrescr");
            columnNamesMap.Add("RenewablePrescriptionNumber", "RenewablePrescrNumber");
            columnNamesMap.Add("Rent", "Rent");
            columnNamesMap.Add("RentalApprovalCode", "RentalApprovalCode");
            columnNamesMap.Add("RentTo", "RentTo");
            columnNamesMap.Add("RepairApprovalCode", "RepairApprovalCode");
            columnNamesMap.Add("RepairDate", "RepairDate");
            columnNamesMap.Add("RepairDescription", "RepairDescr");
            columnNamesMap.Add("RepairPrice", "RepairPrice");
            columnNamesMap.Add("Repeat", "Repeat");
            columnNamesMap.Add("ReplacedPartsWarranty", "ReplacedPartsWarranty");
            columnNamesMap.Add("ReplacementWarranty", "ReplacementWarranty");
            columnNamesMap.Add("RescueTransportID", "RescueTransID");
            columnNamesMap.Add("ResponseIdentifier", "ResponseIdentifier");
            columnNamesMap.Add("Restrictions", "Restrictions");
            columnNamesMap.Add("ResultDescription", "ResultDescr");
            columnNamesMap.Add("ResultTypeID", "ResultTypID");
            columnNamesMap.Add("ReturnedFromZZZS", "ReturnedFromZZZS");
            columnNamesMap.Add("ReviewDentalState", "ReviewDentalState");
            columnNamesMap.Add("Revision", "Revision");
            columnNamesMap.Add("RevocationReason", "RevocationReason");
            columnNamesMap.Add("RhFactor", "RhFactor");
            columnNamesMap.Add("RoleID", "RoleID");
            columnNamesMap.Add("RoleOperationRelationID", "RoleOperaRelID");
            columnNamesMap.Add("RoleTranID", "RoleTID");
            columnNamesMap.Add("RTGCardIndexNumber", "RTGCardIndNumber");
            columnNamesMap.Add("RTGInginer", "RTGInginer");
            columnNamesMap.Add("RuleSet", "RuleSet");
            columnNamesMap.Add("SchoolClass", "SchoolClass");
            columnNamesMap.Add("SchoolCode", "SchoolCode");
            columnNamesMap.Add("SchoolHealthCareProviderRelationID", "SchoolHCareProvRelID");
            columnNamesMap.Add("SchoolID", "SchoolID");
            columnNamesMap.Add("SchoolKindergartenID", "SchoolKindergartenID");
            columnNamesMap.Add("SchoolKindergartenTranID", "SchoolKindergartenTID");
            columnNamesMap.Add("SchoolTranID", "SchoolTID");
            columnNamesMap.Add("SectionName", "SectionName");
            columnNamesMap.Add("SecurityGroup", "SecurityGroup");
            columnNamesMap.Add("SelectedHealthCareProfessional", "SeledHCareProfes");
            columnNamesMap.Add("SensitiveDiagnose", "SensitiveDiag");
            columnNamesMap.Add("Sent", "Sent");
            columnNamesMap.Add("SentHome", "SentHome");
            columnNamesMap.Add("SentOn", "SentOn");
            columnNamesMap.Add("SentToZZZS", "SentToZZZS");
            columnNamesMap.Add("Service", "Svc");
            columnNamesMap.Add("ServiceCode", "SvcCode");
            columnNamesMap.Add("ServiceID", "SvcID");
            columnNamesMap.Add("ServiceIdentificatorRelationID", "SvcIdentRelID");
            columnNamesMap.Add("ServiceMetadataEndpoint", "SvcMetadataEndpoint");
            columnNamesMap.Add("ServiceName", "SvcName");
            columnNamesMap.Add("ServiceOperationRelationID", "SvcOperaRelID");
            columnNamesMap.Add("ServiceRoleRelationID", "SvcRoleRelID");
            columnNamesMap.Add("ServicerStatment", "SvcrStatment");
            columnNamesMap.Add("ServiceTranID", "SvcTID");
            columnNamesMap.Add("SettingName", "SettName");
            columnNamesMap.Add("SettingValue", "SettValue");
            columnNamesMap.Add("Severity", "Severity");
            columnNamesMap.Add("SeVneseZnesek", "SeVneseZnesek");
            columnNamesMap.Add("ShortName", "ShortName");
            columnNamesMap.Add("SifraDejavnosti", "SifrDej");
            columnNamesMap.Add("SifraKriterijaZaPriloge", "SifrKritaZaPriloge");
            columnNamesMap.Add("SifraObracunskegaDokumenta", "SifrObracDokua");
            columnNamesMap.Add("SifraSkupineMTP", "SifrSkupiMTP");
            columnNamesMap.Add("SifraSpremljanjaStoritevID", "SifrSpremlStoriID");
            columnNamesMap.Add("SifraSpremljanjaStoritevTranID", "SifrSpremlStoriTID");
            columnNamesMap.Add("SifraZdravstvenegaDelavca", "SifrZdrgaDelavca");
            columnNamesMap.Add("Sintervention911", "Sintervention911");
            columnNamesMap.Add("SizeOfWaist", "SizeOfWaist");
            columnNamesMap.Add("SkipObrada", "SkipObrada");
            columnNamesMap.Add("Sklep_IZ", "Sklep_IZ");
            columnNamesMap.Add("SklepIZ", "SklepIZ");
            columnNamesMap.Add("SkupinaStoritev", "SkupinaStori");
            columnNamesMap.Add("SkupineMedicinskoTehnicenPripomocekID", "SkupiMedTehPripID");
            columnNamesMap.Add("SkupinskaStoritevRelacijaID", "SkupiStoriRelID");
            columnNamesMap.Add("SkupinskiObisk", "SkupinskiObisk");
            columnNamesMap.Add("SkupniZnesek", "SkupniZnesek");
            columnNamesMap.Add("Smoking", "Smok");
            columnNamesMap.Add("SmokingCessation", "SmokCessation");
            columnNamesMap.Add("SmokingCessationDate", "SmokCessationDate");
            columnNamesMap.Add("SmokingCessationResultID", "SmokCessationResultID");
            columnNamesMap.Add("SmokingCessationResultTranID", "SmokCessationResultTID");
            columnNamesMap.Add("Social", "Social");
            columnNamesMap.Add("SoglasjeZZZS", "SoglasjeZZZS");
            columnNamesMap.Add("SopportApprovalCode", "SopportApprovalCode");
            columnNamesMap.Add("SopportDate", "SopportDate");
            columnNamesMap.Add("SopportDescription", "SopportDescr");
            columnNamesMap.Add("SorodstveniOdnosNosilcaZavarovanja", "SorodstveniOdnosNosilcaZavar");
            columnNamesMap.Add("SourceIVZServiceID", "SourceIVZSvcID");
            columnNamesMap.Add("SourceIVZServiceTranID", "SourceIVZSvcTID");
            columnNamesMap.Add("SourceWorkPlaceCode", "SourceWorkPlaceCode");
            columnNamesMap.Add("SourceWorkPlaceID", "SourceWorkPlaceID");
            columnNamesMap.Add("SourceWorkPlaceTranID", "SourceWorkPlaceTID");
            columnNamesMap.Add("SpecialistID", "SpecialistID");
            columnNamesMap.Add("SpecialistReportID", "SpecialistRepID");
            columnNamesMap.Add("SpecialistTranID", "SpecialistTID");
            columnNamesMap.Add("Speciality", "Speciality");
            columnNamesMap.Add("Specialization", "Specialization");
            columnNamesMap.Add("SpecificDescription", "SpecificDescr");
            columnNamesMap.Add("SpellOfCareID", "SpellOfCareID");
            columnNamesMap.Add("SpellOfCareSubType", "SpellOfCareSubTyp");
            columnNamesMap.Add("SpellOfCareTitle", "SpellOfCareTitle");
            columnNamesMap.Add("SpellOfCareTranID", "SpellOfCareTID");
            columnNamesMap.Add("SpellOfCareType", "SpellOfCareTyp");
            columnNamesMap.Add("Spol", "Spol");
            columnNamesMap.Add("Sporocilo", "Sporocilo");
            columnNamesMap.Add("StackTrace", "StackTrace");
            columnNamesMap.Add("StandardClassificationOfActivityID", "StandClassOfActivityID");
            columnNamesMap.Add("StandardClassificationOfActivityTranID", "StandClassOfActivityTID");
            columnNamesMap.Add("StandardClassificationOfOccupationID", "StandClassOfOccupID");
            columnNamesMap.Add("StarostDo", "StarostDo");
            columnNamesMap.Add("StarostOd", "StarostOd");
            columnNamesMap.Add("StartDate", "StartDate");
            columnNamesMap.Add("StartingCosts", "StartingCosts");
            columnNamesMap.Add("StartOfDisability", "StartOfDisabil");
            columnNamesMap.Add("StateFundedPrescriptionID", "StateFundedPrescrID");
            columnNamesMap.Add("StateName", "StateName");
            columnNamesMap.Add("Status", "Stat");
            columnNamesMap.Add("StatusPosiljanja", "StatPosiljanja");
            columnNamesMap.Add("StevilkaDokumenta", "StevilkaDokua");
            columnNamesMap.Add("StevilkaNaloga", "StevilkaNaloga");
            columnNamesMap.Add("StevilkaNapotnice", "StevilkaNapotnice");
            columnNamesMap.Add("StevilkaPolicePZZ", "StevilkaPolicePZZ");
            columnNamesMap.Add("SteviloEnotMere", "SteviloEnotMere");
            columnNamesMap.Add("StopnjaDDV", "StopnjaDDV");
            columnNamesMap.Add("SubCategoryCode", "SubCategCode");
            columnNamesMap.Add("SubjectiveNote", "SubjecNote");
            columnNamesMap.Add("SubscribersForPreventiveVisitID", "SubscrsForPreventVisitID");
            columnNamesMap.Add("Substance", "Substance");
            columnNamesMap.Add("SuggestedActionsID", "SuggestActionsID");
            columnNamesMap.Add("SuggestionAbandonmentOfSmoking", "SuggestAbandOfSmok");
            columnNamesMap.Add("SuggestionAbandonmentOfSmokingDate", "SuggestAbandOfSmokDate");
            columnNamesMap.Add("SuggestionAbandonmentOfSmokingResultID", "SuggestAbandOfSmokResultID");
            columnNamesMap.Add("SuggestionAbandonmentOfSmokingResultTranID", "SuggestAbandOfSmokResultTID");
            columnNamesMap.Add("SupplierName", "SupplName");
            columnNamesMap.Add("SupplierZZZSNumber", "SupplZZZSNumber");
            columnNamesMap.Add("SupplierZZZSOrganisationName", "SupplZZZSOrganisName");
            columnNamesMap.Add("SupplierZZZSOrganisationNumber", "SupplZZZSOrganisNumber");
            columnNamesMap.Add("Supstance", "Supstance");
            columnNamesMap.Add("SurgicalInterventionID", "SurgIntrID");
            columnNamesMap.Add("SynhronizationPromeneEnd", "SynhronizationPromeneEnd");
            columnNamesMap.Add("SynhronizationPromeneStart", "SynhronizationPromeneStart");
            columnNamesMap.Add("SynhronizationStatusEnd", "SynhronizationStatEnd");
            columnNamesMap.Add("SynhronizationStatusStart", "SynhronizationStatStart");
            columnNamesMap.Add("sysCreatedOn", "sysCreatedOn");
            columnNamesMap.Add("sysCreator", "sysCreator");
            columnNamesMap.Add("sysISU", "sysISU");
            columnNamesMap.Add("sysModifiedOn", "sysModifiedOn");
            columnNamesMap.Add("sysModifier", "sysModifier");
            columnNamesMap.Add("sysPackageImported", "sysPackageImported");
            columnNamesMap.Add("SystemParameters", "SystParameters");
            columnNamesMap.Add("SystemPartner", "SystPartner");
            columnNamesMap.Add("sysValidFrom", "sysValidFrom");
            columnNamesMap.Add("TakeoverDate", "TakeoverDate");
            columnNamesMap.Add("TakeoverTime", "TakeoverTime");
            columnNamesMap.Add("TargetEncounterTranID", "TargetEncounTID");
            columnNamesMap.Add("TargetHealthCareWorkplaceID", "TargetHCareWorkplID");
            columnNamesMap.Add("TargetHealthCareWorkplaceTranID", "TargetHCareWorkplTID");
            columnNamesMap.Add("TargetVisitID", "TargetVisitID");
            columnNamesMap.Add("TargetVisitTranID", "TargetVisitTID");
            columnNamesMap.Add("TaxLiable", "TaxLiable");
            columnNamesMap.Add("TaxNumber", "TaxNumber");
            columnNamesMap.Add("TDDescription", "TDDescr");
            columnNamesMap.Add("TechnicianID", "TechnicianID");
            columnNamesMap.Add("TechnicianTranID", "TechnicianTID");
            columnNamesMap.Add("TemporaryAddress", "TmpAddress");
            columnNamesMap.Add("TemporaryAddressAdditionalCode", "TmpAddressAdditionalCode");
            columnNamesMap.Add("TemporaryCountryCode", "TmpCountryCode");
            columnNamesMap.Add("TemporaryCountryID", "TmpCountryID");
            columnNamesMap.Add("TemporaryCountryTranID", "TmpCountryTID");
            columnNamesMap.Add("TemporaryMunicipalityCode", "TmpMunicipalityCode");
            columnNamesMap.Add("TemporaryMunicipalityID", "TmpMunicipalityID");
            columnNamesMap.Add("TemporaryMunicipalityName", "TmpMunicipalityName");
            columnNamesMap.Add("TemporaryMunicipalityTranID", "TmpMunicipalityTID");
            columnNamesMap.Add("TemporaryPostalCode", "TmpPostalCode");
            columnNamesMap.Add("TemporaryPostalName", "TmpPostalName");
            columnNamesMap.Add("TemporaryPostOfficeID", "TmpPostOfficeID");
            columnNamesMap.Add("TemporaryPostOfficeTranID", "TmpPostOfficeTID");
            columnNamesMap.Add("TimeElapsed", "TimeElapsed");
            columnNamesMap.Add("TimeOfArrival", "TimeOfArriv");
            columnNamesMap.Add("TimeOfArrivalToPlace", "TimeOfArrivToPlace");
            columnNamesMap.Add("TimeStamp", "TimeStamp");
            columnNamesMap.Add("Tip", "Tip");
            columnNamesMap.Add("TipDokumentaID", "TipDokuaID");
            columnNamesMap.Add("TipDokumentaTranID", "TipDokuaTID");
            columnNamesMap.Add("TipObracunskegaDokumentaID", "TipObracDokuaID");
            columnNamesMap.Add("TipObracunskegaDokumentaTranID", "TipObracDokuaTID");
            columnNamesMap.Add("TipOsebeBrezZavarovanjaID", "TipOsebeBrezZavarID");
            columnNamesMap.Add("TipOsebeBrezZavarovanjaTranID", "TipOsebeBrezZavarTID");
            columnNamesMap.Add("TipStevilke", "TipStevilke");
            columnNamesMap.Add("TipZavarovaneOsebeID", "TipZavarOsebeID");
            columnNamesMap.Add("TipZavarovaneOsebeTranID", "TipZavarOsebeTID");
            columnNamesMap.Add("Title", "Title");
            columnNamesMap.Add("TitleAsPrefix", "TitleAsPrefix");
            columnNamesMap.Add("TitleAsSuffix", "TitleAsSuffix");
            columnNamesMap.Add("Tocke", "Tocke");
            columnNamesMap.Add("TockovniFaktor", "TockovniFaktor");
            columnNamesMap.Add("TotalHours", "TotalHours");
            columnNamesMap.Add("TotalProgressAll", "TotalProgressAll");
            columnNamesMap.Add("TotalProgressCount", "TotalProgressCount");
            columnNamesMap.Add("Trajanje", "Trajanje");
            columnNamesMap.Add("TrajnostnaDoba", "TrajDoba");
            columnNamesMap.Add("TrajnostnaDobaMTPID", "TrajDobaMTPID");
            columnNamesMap.Add("TrajnostnaDobaMTPTranID", "TrajDobaMTPTID");
            columnNamesMap.Add("TransactionAccount", "TransactionAccount");
            columnNamesMap.Add("TransportAddress", "TransAddress");
            columnNamesMap.Add("TransportArtCode", "TransArtCode");
            columnNamesMap.Add("TransportArtID", "TransArtID");
            columnNamesMap.Add("TransportArtTranID", "TransArtTID");
            columnNamesMap.Add("TransportDate", "TransDate");
            columnNamesMap.Add("TransportDetailID", "TransDetailID");
            columnNamesMap.Add("TransportDetails", "TransDetails");
            columnNamesMap.Add("TransportDetailsCode", "TransDetailsCode");
            columnNamesMap.Add("TransportDetailsID", "TransDetailsID");
            columnNamesMap.Add("TransportDetailsTranID", "TransDetailsTID");
            columnNamesMap.Add("TransportDoctorCode", "TransDoctCode");
            columnNamesMap.Add("TransportDoctorID", "TransDoctID");
            columnNamesMap.Add("TransportDoctorTranID", "TransDoctTID");
            columnNamesMap.Add("TransportDriverCode", "TransDriverCode");
            columnNamesMap.Add("TransportDriverID", "TransDriverID");
            columnNamesMap.Add("TransportDriverTranID", "TransDriverTID");
            columnNamesMap.Add("TransportedToHospital", "TransedToHospital");
            columnNamesMap.Add("TransportedToZD", "TransedToZD");
            columnNamesMap.Add("TransportEscort", "TransEscort");
            columnNamesMap.Add("TransportExtraKilometers", "TransExtraKilometers");
            columnNamesMap.Add("TransportKilometers", "TransKilometers");
            columnNamesMap.Add("TransportNote", "TransNote");
            columnNamesMap.Add("TransportPayer", "TransPay");
            columnNamesMap.Add("TransportPayerCode", "TransPayCode");
            columnNamesMap.Add("TransportPayerID", "TransPayID");
            columnNamesMap.Add("TransportPayerTranID", "TransPayTID");
            columnNamesMap.Add("TransportReason", "TransReason");
            columnNamesMap.Add("TransportReasonCode", "TransReasonCode");
            columnNamesMap.Add("TransportReasonID", "TransReasonID");
            columnNamesMap.Add("TransportReasonTranID", "TransReasonTID");
            columnNamesMap.Add("TransportRelation", "TransRel");
            columnNamesMap.Add("TransportRelationCode", "TransRelCode");
            columnNamesMap.Add("TransportRelationID", "TransRelID");
            columnNamesMap.Add("TransportRelationTranID", "TransRelTID");
            columnNamesMap.Add("TransportStatus", "TransStat");
            columnNamesMap.Add("TransportStatusCode", "TransStatCode");
            columnNamesMap.Add("TransportStatusID", "TransStatID");
            columnNamesMap.Add("TransportStatusTranID", "TransStatTID");
            columnNamesMap.Add("TransportSubscriber", "TransSubscr");
            columnNamesMap.Add("TransportSubscriberIVZ", "TransSubscrIVZ");
            columnNamesMap.Add("TransportSubscriberName", "TransSubscrName");
            columnNamesMap.Add("TransportTechniqueCode", "TransTechniqueCode");
            columnNamesMap.Add("TransportTechniqueID", "TransTechniqueID");
            columnNamesMap.Add("TransportTechniqueTranID", "TransTechniqueTID");
            columnNamesMap.Add("TransportTime", "TransTime");
            columnNamesMap.Add("TransportTotalValue", "TransTotalValue");
            columnNamesMap.Add("TransportTypeID", "TransTypID");
            columnNamesMap.Add("TransportVehicleCode", "TransVehicCode");
            columnNamesMap.Add("TransportVehicleID", "TransVehicID");
            columnNamesMap.Add("TransportVehicleTranID", "TransVehicTID");
            columnNamesMap.Add("TreatmentFinished", "TreatFinished");
            columnNamesMap.Add("TreatmentWithDrugs", "TreatWithDrugs");
            columnNamesMap.Add("TreatmentWithDrugsDate", "TreatWithDrugsDate");
            columnNamesMap.Add("TreatmentWithDrugsResultID", "TreatWithDrugsResultID");
            columnNamesMap.Add("TreatmentWithDrugsResultTranID", "TreatWithDrugsResultTID");
            columnNamesMap.Add("Triglycerides", "Triglycerides");
            columnNamesMap.Add("Type", "Typ");
            columnNamesMap.Add("TypeName", "TypName");
            columnNamesMap.Add("TypeOfContraceptionID", "TypOfContraceptID");
            columnNamesMap.Add("TypeOfNote", "TypOfNote");
            columnNamesMap.Add("TypeOfPeriod", "TypOfPeriod");
            columnNamesMap.Add("TypeOfResults", "TypOfResults");
            columnNamesMap.Add("TypeOfServicing", "TypOfServicing");
            columnNamesMap.Add("TypeOfsettlementID", "TypOfsettlemID");
            columnNamesMap.Add("TypeOfTransportID", "TypOfTransID");
            columnNamesMap.Add("TypeOfTransportNonUrgentID", "TypOfTransNonUrgeID");
            columnNamesMap.Add("TypeOfVaccinationID", "TypOfVaccinID");
            columnNamesMap.Add("TypeOfVaccinationRelationID", "TypOfVaccinRelID");
            columnNamesMap.Add("TypeOfVaccinationTranID", "TypOfVaccinTID");
            columnNamesMap.Add("TypeOfVehicleID", "TypOfVehicID");
            columnNamesMap.Add("TypeOfVisitationID", "TypOfVisitationID");
            columnNamesMap.Add("TypeOfVisitationTranID", "TypOfVisitationTID");
            columnNamesMap.Add("TypesOfInterventionsID", "TypsOfIntrID");
            columnNamesMap.Add("uidInstanceID", "uidInstanceID");
            columnNamesMap.Add("UlicaInHisnaStevilka", "UlicaInHisnaStevilka");
            columnNamesMap.Add("UniqueCitizenId", "UnqeCitizenId");
            columnNamesMap.Add("UnknownTransport", "UnknownTrans");
            columnNamesMap.Add("UnnecessaryIntervention", "UnnecessaryIntr");
            columnNamesMap.Add("UpdatedOn", "UpdatedOn");
            columnNamesMap.Add("Urgent", "Urge");
            columnNamesMap.Add("UrgentContact", "UrgeContact");
            columnNamesMap.Add("UrgentInterventionAdmissionSummaryID", "UrgeIntrAdmissSummID");
            columnNamesMap.Add("UrgentInterventionProtocolSummaryID", "UrgeIntrProtoSummID");
            columnNamesMap.Add("UrgentIssue", "UrgeIssue");
            columnNamesMap.Add("UrgentTransport", "UrgeTrans");
            columnNamesMap.Add("UsedEkg", "UsedEkg");
            columnNamesMap.Add("UseIVZService", "UseIVZSvc");
            columnNamesMap.Add("User", "User");
            columnNamesMap.Add("UserGroupID", "UserGroupID");
            columnNamesMap.Add("UserGroupRelationID", "UserGroupRelID");
            columnNamesMap.Add("UserGroupTranID", "UserGroupTID");
            columnNamesMap.Add("UserID", "UserID");
            columnNamesMap.Add("UserName", "UserName");
            columnNamesMap.Add("UserRoleRelationID", "UserRoleRelID");
            columnNamesMap.Add("UsersOfPreventiveVisitsID", "UsersOfPreventVisitID");
            columnNamesMap.Add("UserTranID", "UserTID");
            columnNamesMap.Add("UspesnoIzradjen", "UspesnoIzradjen");
            columnNamesMap.Add("Utez", "Utez");
            columnNamesMap.Add("VaccinationCode", "VaccinCode");
            columnNamesMap.Add("VaccinationElsewhere", "VaccinElsewhere");
            columnNamesMap.Add("VaccinationID", "VaccinID");
            columnNamesMap.Add("VaccinationTranID", "VaccinTID");
            columnNamesMap.Add("VaccinationTypeID", "VaccinTypID");
            columnNamesMap.Add("VaccinationTypeTranID", "VaccinTypTID");
            columnNamesMap.Add("VaccinationTypeVaccinationRelationID", "VaccinTypVaccinRelID");
            columnNamesMap.Add("VaccinationVaccineRelationID", "VaccinVaccineRelID");
            columnNamesMap.Add("VaccineCode", "VaccineCode");
            columnNamesMap.Add("VaccineDose", "VaccineDose");
            columnNamesMap.Add("VaccineManufacturer", "VaccineManufacturer");
            columnNamesMap.Add("VaccineName", "VaccineName");
            columnNamesMap.Add("VaccineResult", "VaccineResult");
            columnNamesMap.Add("VaccineSeries", "VaccineSeries");
            columnNamesMap.Add("ValidityOfOrder", "ValidityOfOrder");
            columnNamesMap.Add("Value", "Value");
            columnNamesMap.Add("ValueBool", "ValueBool");
            columnNamesMap.Add("ValueDate", "ValueDate");
            columnNamesMap.Add("ValueDecimal", "ValueDecimal");
            columnNamesMap.Add("ValueInt", "ValueInt");
            columnNamesMap.Add("ValueNumericLower", "ValueNumericLower");
            columnNamesMap.Add("ValueNumericLowerCritical", "ValueNumericLowerCritical");
            columnNamesMap.Add("ValueNumericMax", "ValueNumericMax");
            columnNamesMap.Add("ValueNumericMin", "ValueNumericMin");
            columnNamesMap.Add("ValueNumericUpper", "ValueNumericUpper");
            columnNamesMap.Add("ValueNumericUpperCritical", "ValueNumericUpperCritical");
            columnNamesMap.Add("ValueText", "ValueText");
            columnNamesMap.Add("Var1", "Var1");
            columnNamesMap.Add("Var2", "Var2");
            columnNamesMap.Add("Var3", "Var3");
            columnNamesMap.Add("Var4", "Var4");
            columnNamesMap.Add("Var5", "Var5");
            columnNamesMap.Add("Var6", "Var6");
            columnNamesMap.Add("Var7", "Var7");
            columnNamesMap.Add("Var8", "Var8");
            columnNamesMap.Add("Var9", "Var9");
            columnNamesMap.Add("VehicleMake", "VehicMake");
            columnNamesMap.Add("VehicleMaxNumberOfPassengers", "VehicMaxNumberOfPassengers");
            columnNamesMap.Add("VehicleRegistrationNumber", "VehicRegistNumber");
            columnNamesMap.Add("VehicleYearofManufacture", "VehicYearofManufacture");
            columnNamesMap.Add("VensPath", "VensPath");
            columnNamesMap.Add("Version", "Version");
            columnNamesMap.Add("VisitID", "VisitID");
            columnNamesMap.Add("VisitInsuranceID", "VisitInsurID");
            columnNamesMap.Add("VisitInsuranceTranID", "VisitInsurTID");
            columnNamesMap.Add("VisitServiceID", "VisitSvcID");
            columnNamesMap.Add("VisitToUsersID", "VisitToUsersID");
            columnNamesMap.Add("VisitTranID", "VisitTID");
            columnNamesMap.Add("VisokaCenaEnoteMere", "VisokaCenaEnoteMere");
            columnNamesMap.Add("VoluntaryInsuranceCarrierCode", "VoluntInsurCarriCode");
            columnNamesMap.Add("VoluntaryInsuranceCarrierID", "VoluntInsurCarriID");
            columnNamesMap.Add("VoluntaryInsuranceCarrierTranID", "VoluntInsurCarriTID");
            columnNamesMap.Add("VoluntaryInsuranceCompany", "VoluntInsurCompany");
            columnNamesMap.Add("VoluntaryInsuranceData", "VoluntInsurData");
            columnNamesMap.Add("VoluntaryInsuranceID", "VoluntInsurID");
            columnNamesMap.Add("VoluntaryInsuranceTranID", "VoluntInsurTID");
            columnNamesMap.Add("VrednostStoritvi", "VrednostStoritvi");
            columnNamesMap.Add("Vrsta", "Vrsta");
            columnNamesMap.Add("VrstaPlacnikaPrispevkovID", "VrstaPlacnPrispID");
            columnNamesMap.Add("VrstaPlacnikaPrispevkovTranID", "VrstaPlacnPrispTID");
            columnNamesMap.Add("VrstaZdravnikaID", "VrstaZdravnikaID");
            columnNamesMap.Add("VsebinaObravnaveID", "VsebObravID");
            columnNamesMap.Add("VsebinaObravnaveTranID", "VsebObravTID");
            columnNamesMap.Add("VzrokPoskodbeID", "VzrokPoskodbeID");
            columnNamesMap.Add("VzrokPoskodbeTranID", "VzrokPoskodbeTID");
            columnNamesMap.Add("WaitingListID", "WaitListID");
            columnNamesMap.Add("WaitingListStateID", "WaitListStateID");
            columnNamesMap.Add("WaitingListTranID", "WaitListTID");
            columnNamesMap.Add("WaitingListType", "WaitListTyp");
            columnNamesMap.Add("WayOfPaymentID", "WayOfPayID");
            columnNamesMap.Add("WayOfPaymentTranID", "WayOfPayTID");
            columnNamesMap.Add("WeightLost", "WeightLost");
            columnNamesMap.Add("WeightLostDate", "WeightLostDate");
            columnNamesMap.Add("WeightLostResultID", "WeightLostResultID");
            columnNamesMap.Add("WeightLostResultTranID", "WeightLostResultTID");
            columnNamesMap.Add("WhiteReceiptePayerID", "WhiteReceiptePayID");
            columnNamesMap.Add("WillBeServiced", "WillBeSvcd");
            columnNamesMap.Add("WindowsIdentityID", "WinIdentID");
            columnNamesMap.Add("WindowsIdentityTranID", "WinIdentTID");
            columnNamesMap.Add("WizilistID", "WizilistID");
            columnNamesMap.Add("WizilistTranID", "WizilistTID");
            columnNamesMap.Add("Work", "Work");
            columnNamesMap.Add("WorkCapabilityAssesmentID", "WorkCapabAssesmID");
            columnNamesMap.Add("WorkingHours", "WorkingHours");
            columnNamesMap.Add("WorkItemNumber", "WorkItemNumber");
            columnNamesMap.Add("WorkMedicineTypeOfExaminationID", "WorkMedicineTypOfExamiID");
            columnNamesMap.Add("WorkplaceCode", "WorkplCode");
            columnNamesMap.Add("WorkplaceID", "WorkplID");
            columnNamesMap.Add("WorkPlaceNumber", "WorkPlaceNumber");
            columnNamesMap.Add("WorkplaceTranID", "WorkplTID");
            columnNamesMap.Add("WorkshopAdvertisingMaterial", "WshopAdvertisingMaterial");
            columnNamesMap.Add("WorkshopAvdiovizResources", "WshopAvdiovizResources");
            columnNamesMap.Add("WorkshopBaseCode", "WshopBaseCode");
            columnNamesMap.Add("WorkshopBaseID", "WshopBaseID");
            columnNamesMap.Add("WorkshopBaseTranID", "WshopBaseTID");
            columnNamesMap.Add("WorkshopClassEnota", "WshopClassEnota");
            columnNamesMap.Add("WorkshopContentCode", "WshopContentCode");
            columnNamesMap.Add("WorkshopContentID", "WshopContentID");
            columnNamesMap.Add("WorkshopContentTranID", "WshopContentTID");
            columnNamesMap.Add("WorkshopDuration", "WshopDuration");
            columnNamesMap.Add("WorkshopFormOfWorkCode", "WshopFormOfWorkCode");
            columnNamesMap.Add("WorkshopFormOfWorkID", "WshopFormOfWorkID");
            columnNamesMap.Add("WorkshopFormOfWorkTranID", "WshopFormOfWorkTID");
            columnNamesMap.Add("WorkshopID", "WshopID");
            columnNamesMap.Add("WorkshopLevelCode", "WshopLevelCode");
            columnNamesMap.Add("WorkshopLevelID", "WshopLevelID");
            columnNamesMap.Add("WorkshopLevelTranID", "WshopLevelTID");
            columnNamesMap.Add("WorkshopLifestyle", "WshopLifestyle");
            columnNamesMap.Add("WorkshopLifestyleDate", "WshopLifestyleDate");
            columnNamesMap.Add("WorkshopLifestyleResultID", "WshopLifestyleResultID");
            columnNamesMap.Add("WorkshopLifestyleResultTranID", "WshopLifestyleResultTID");
            columnNamesMap.Add("WorkshopMediaCode", "WshopMediaCode");
            columnNamesMap.Add("WorkshopMediaID", "WshopMediaID");
            columnNamesMap.Add("WorkshopMediaTranID", "WshopMediaTID");
            columnNamesMap.Add("WorkshopMethodCode", "WshopMethCode");
            columnNamesMap.Add("WorkshopMethodID", "WshopMethID");
            columnNamesMap.Add("WorkshopMethodTranID", "WshopMethTID");
            columnNamesMap.Add("WorkshopOfTheRiskFactors", "WshopOfRiskFact");
            columnNamesMap.Add("WorkshopOfTheRiskFactorsDate", "WshopOfRiskFactDate");
            columnNamesMap.Add("WorkshopOfTheRiskFactorsResultID", "WshopOfRiskFactResultID");
            columnNamesMap.Add("WorkshopOfTheRiskFactorsResultTranID", "WshopOfRiskFactResultTID");
            columnNamesMap.Add("WorkshopPlaceOfPerformanceCode", "WshopPlaceOfPerformCode");
            columnNamesMap.Add("WorkshopPlaceOfPerformanceDescription", "WshopPlaceOfPerformDescr");
            columnNamesMap.Add("WorkshopPlaceOfPerformanceID", "WshopPlaceOfPerformID");
            columnNamesMap.Add("WorkshopPlaceOfPerformanceTranID", "WshopPlaceOfPerformTID");
            columnNamesMap.Add("WorkshopServiceID", "WshopSvcID");
            columnNamesMap.Add("WorkshopServiceMethodID", "WshopSvcMethID");
            columnNamesMap.Add("WorkshopServiceProfessionalRelationID", "WshopSvcProfesRelID");
            columnNamesMap.Add("WorkshopServiceTranID", "WshopSvcTID");
            columnNamesMap.Add("WorkshopTestWalk", "WshopTestWalk");
            columnNamesMap.Add("WorkshopTestWalkDate", "WshopTestWalkDate");
            columnNamesMap.Add("WorkshopTestWalkResultID", "WshopTestWalkResultID");
            columnNamesMap.Add("WorkshopTestWalkResultTranID", "WshopTestWalkResultTID");
            columnNamesMap.Add("WorkshopTranID", "WshopTID");
            columnNamesMap.Add("XMLLogEntry", "XMLLogEntry");
            columnNamesMap.Add("Zahtevnost", "Zahtevnost");
            columnNamesMap.Add("ZdravstvenaDejavnostID", "ZdrDejID");
            columnNamesMap.Add("ZdravstvenaDejavnostTranID", "ZdrDejTID");
            columnNamesMap.Add("ZdravstvenaPodskupinaDejavnostiID", "ZdrPodskDejID");
            columnNamesMap.Add("ZdravstvenaPodskupinaDejavnostiTranID", "ZdrPodskDejTID");
            columnNamesMap.Add("ZdravstvenaStoritevEncounterRelacijaID", "ZdrStoriEncounRelID");
            columnNamesMap.Add("ZdravstvenaStoritevID", "ZdrStoriID");
            columnNamesMap.Add("ZdravstvenaStoritevTranID", "ZdrStoriTID");
            columnNamesMap.Add("ZISPodStoritevID", "ZISPodStoriID");
            columnNamesMap.Add("ZISPodStoritevTranID", "ZISPodStoriTID");
            columnNamesMap.Add("ZISStoritevCode", "ZISStoriCode");
            columnNamesMap.Add("ZISStoritevID", "ZISStoriID");
            columnNamesMap.Add("ZISStoritevTranID", "ZISStoriTID");
            columnNamesMap.Add("Znesek1", "Znesek1");
            columnNamesMap.Add("Znesek2", "Znesek2");
            columnNamesMap.Add("ZORAInvitationID", "ZORAInvitationID");
            columnNamesMap.Add("Zvezdice", "Zvezdice");
            columnNamesMap.Add("ZzvCode", "ZzvCode");
            columnNamesMap.Add("ZZZS", "ZZZS");
            columnNamesMap.Add("ZZZSID", "ZZZSID");
            columnNamesMap.Add("ZzzsNumber", "ZzzsNumber");
            columnNamesMap.Add("Kompenzacija", "Kompenzacija");
        }

        /// <summary>
        /// Returns mapped (short) name if DBType is Oracle, else returns input parameter name value.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="dbClientType"></param>
        /// <returns></returns>
        public static String GetDbName(string name, Database.DbClientType dbClientType) 
        {
            if (dbClientType == Database.DbClientType.OracleServer)
            {
                try
                {
                    return columnNamesMap[name];
                }
                catch (KeyNotFoundException)
                {
                    // if no value then return back name
                    return name;
                }
            }
            else
            {
                return name;
            }
        }
    }
}
